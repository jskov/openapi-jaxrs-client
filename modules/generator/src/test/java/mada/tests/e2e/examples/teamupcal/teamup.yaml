openapi: 3.0.0
info:
  title: Teamup
  description: ''
  termsOfService: 'https://www.teamup.com/terms-of-service/'
  contact:
    name: Teamup Support
    url: 'https://www.teamup.com/help/general-help/'
    email: support@teamup.com
  version: '1.0'
servers:
  - url: 'https://api.teamup.com'
    description: Teamup API
paths:
  /auth/tokens:
    post:
      tags:
        - Authenticate
      summary: Obtaining a bearer token
      description: |-
        This endpoint can be used to log in via a username and password to obtain an authentication token that can then
        be used as bearer token in future requests.

        Note that this is only necessary when the calendarKey that you are using to access the API is not providing the
        required access rights!

        If you do not have Multifactor authentication set up for your account you can ommit the '2fa_code' key-value pair.

        Use the `auth_token` from the response for all subsequent requests to the API as Bearer token like this:

        ```bash
        curl "https://api.teamup.com/ksxxxxxxxxxxxxxxx/events" \
        -H "Teamup-Token: API_KEY" \
        -H "Authorization: Bearer [value of auth_token]"
        ```
      operationId: post_fos_user_auth_tokens
      requestBody:
        description: Authentication information
        required: true
        content:
          application/json:
            schema:
              required:
                - app_name
                - device_id
                - email
                - password
              properties:
                app_name:
                  type: string
                  example: My awesome new app
                device_id:
                  type: string
                  example: My device
                email:
                  type: string
                  example: doe@example.com
                password:
                  type: string
                  example: P@ssw0rd
                2fa_code:
                  description: The Multi factor code that is valid when the request is sent
                  type: string
                  example: '123456'
              type: object
            examples:
              login_no_mfa:
                summary: log in using only email and password
                value:
                  app_name: My awesome new app
                  device_id: My device
                  email: doe@example.com
                  password: P@ssw0rd
              login_mfa:
                summary: log in using Multi-Factor authentication
                value:
                  app_name: My awesome new app
                  device_id: My device
                  email: doe@example.com
                  password: P@ssw0rd
                  2fa_code: '123456'
      responses:
        '200':
          description: Authentication successfull
          content:
            application/json:
              schema:
                properties:
                  auth_token:
                    description: The auth token to be used in Bearer authentication
                    type: string
                    example: '123456'
                  email:
                    description: The primary email addres of the authenticated user
                    type: string
                    example: doe@example.com
                  name:
                    description: The name of the authenticated user
                    type: string
                    example: Jane
                  avatar_type:
                    description: Whether the avatar image is uploaded or from gravatar
                    type: string
                    example: gravatar
                  avatar_url:
                    description: The link to the users avatar image
                    type: string
                    example: 'https://gravatar.com/avatar/de21b8c123847c80205e93b301437b45?s=400&d=robohash&r=x'
                  language:
                    description: The language the user wants to have their information displayed in
                    type: string
                    example: en
                  is_sso:
                    description: Whether this user has been authenticated via an SSO provider
                    type: boolean
                    example: true
                type: object
        '400':
          description: Generic Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '415':
          description: Unsupported media type
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
      security:
        - teamup_api_key: []
  /users/search:
    get:
      tags:
        - Users
      operationId: get_users_search
      parameters:
        - name: email
          in: query
          description: Optional parameter. It must contain an email address. Only a full match is returned as result.
          schema:
            type: string
        - name: query
          in: query
          description: Optional parameter. It must contain a string that matches the user full name. The search is restricted to a particular organization. The organization url name must be specified through parameter "orgUrlName".
          schema:
            type: string
        - name: orgUrlName
          in: query
          description: This optional parameter defines the organization url name. The user performing the search by full name must be a member of the organization.
          schema:
            type: string
        - name: avatarSize
          in: query
          description: This optional parameter defines the size of user's avatar.
          schema:
            type: string
        - name: includeSubscription
          in: query
          description: 'Optional parameter. If `true` and "subscriptionType" is defined, will look also any existing user subscriptions.'
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
        - name: subscriptionType
          in: query
          description: 'Optional parameter. If parameter "includeSubscription"` is true`, defines the type of user subscription to look for.'
          schema:
            type: string
            enum:
              - notification
              - agenda
        - name: key
          in: query
          description: Optional parameter. It is required only if user subscription must be returned also. It contains an calendar identifier or an anonymous key.
          schema:
            type: string
      responses:
        '200':
          description: Returns a user or a list of users.
          content:
            application/json:
              schema:
                properties:
                  user:
                    type: array
                    items:
                      $ref: '#/components/schemas/user_search'
                type: object
        '400':
          description: Returned when search parameters are missing or contain invalid values.
  '/{calendarKeyOrId}/copy':
    post:
      tags:
        - Calendars
      summary: Duplicate a calendar
      description: |-
        This api endpoint can be used to duplicate a calendar, including the list of sub-calendars and the configuration.
        Not duplicated are calendar events and the sharing configuration.

        Parameter `calendarKeyOrId` addresses the calendar to be duplicated. It's value can be a calendar key or
        a calendar identifier. The calendar key or calendar identifier must fulfil one of the following two conditions
        for the duplication to work:

        - It has administrator permission to the calendar or
        - It is a calendar key with read-only permission to the calendar and the name "Template"

        On success, a HTTP 302 redirect response is returned. The client is redirected to the newly created calendar.
      operationId: post_copy_calendar
      parameters:
        - name: copyConfiguration
          in: query
          description: 'Optional parameter. If `true`, the source calendar''s configuration will be copied. Otherwise, a simple default configuration will be used. Default value is `true`.'
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
        - name: copySubcalendars
          in: query
          description: 'Optional parameter. If `true`, the source calendar''s sub-calendars will be copied. Otherwise, two default sub-calendars are created. Default value is `true`.'
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
        - name: title
          in: query
          description: 'This optional parameter defines the title of the duplicated calendar. If this parameter is not set, the title of the source calendar is copied and a suffix of ''(copy)'' is appended.'
          schema:
            type: string
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
            pattern: '([kK][sS][a-zA-Z0-9_]+|[a-zA-Z0-9]+)'
      responses:
        '302':
          description: The URL of the newly created calendar
          headers:
            Location:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Returned when the base calendar could not be found. Either due to an unknown calendar or due to insufficient access rights to the calendar to be copied
        '429':
          description: Returned when the copy-feature was called too often
          headers:
            Retry-After:
              description: A timestamp that declares the time after which new requests will be accepted
              schema:
                type: integer
  '/{calendarKeyOrId}/configuration':
    get:
      tags:
        - Configuration
      summary: Get the calendar configuration
      operationId: get_list_configuration
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Show the calendar configuration
          content:
            application/json:
              schema:
                properties:
                  configuration:
                    properties:
                      general_settings:
                        type: object
                        allOf:
                          - $ref: '#/components/schemas/AppAttributes.generalsettings'
                          - $ref: '#/components/schemas/App.generalsettings'
                      calendar_views:
                        $ref: '#/components/schemas/AppAttributes.calendar_views'
                      date_time:
                        type: object
                        allOf:
                          - $ref: '#/components/schemas/AppAttributes.date_time'
                          - $ref: '#/components/schemas/App.date_time'
                      identity:
                        $ref: '#/components/schemas/AppAttributes.identity'
                      link:
                        properties:
                          name:
                            title: The name of the link used to retrieve this information
                            type: string
                            example: Anon Admin Key
                          key:
                            title: The calendarKey used to retrieve this information
                            type: string
                            example: ks1234567890123456
                          id:
                            title: The ID of the link used to retrieve this information
                            type: integer
                            example: 1
                          app_id:
                            title: The id of the calendar this link is associated with
                            type: integer
                            example: 1
                          type:
                            title: 'The type of the access: "login" or "anonymous"'
                            type: string
                        type: object
                      features:
                        $ref: '#/components/schemas/LicenseFeatures'
                      fields:
                        $ref: '#/components/schemas/AppAttributes.fields'
                      subcalendars:
                        type: array
                        items:
                          $ref: '#/components/schemas/SubCalendar.read'
                      user:
                        oneOf:
                          - $ref: '#/components/schemas/User.read_self'
                        nullable: true
                    type: object
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
  '/{calendarKeyOrId}/attachments/uploadurl':
    get:
      tags:
        - Attachments
      summary: Get the URL to direct attachment-uploads to
      description: |-
        This endpoint returns a response containing a Location-Header.

        This Location-Header contains a URL that is valid for 10 minutes to upload one or more files that shall be
        used as attachments.

        Upload each file using your systems implementation of the following cURL-command:

        ```
        curl -X POST
          --data-binary=@/path/to/file
          --header "Content-Type:[mimetype of file]"
          [url from Location-Header]
        ```

        This will return a Response containing a JSON-Body like the following:

        ```json
        {
            "container": "teamup-filestack-temp",
            "url": "https://cdn.filestackcontent.com/s7tdGfE5RRKFUxwsZoYv",
            "size": 8331,
            "type": "image/png",
            "filename": "watermark.png",
            "key": "temp/a1RyBxiglW92bS2SRmqM_watermark.png"
        }
        ```

        Use the `key` from this response as `path` for your entry in the attachment-list like so:
        ```
        {
          "attachments": [{
            "name": "My amazing watermark.png",
            "path": "temp/a1RyBxiglW92bS2SRmqM_watermark.png"
          }],
        }
        ```

        If you want to add the attachment to the text of the notes or comments you will need to create a full URL for further usage like this:

        ```
        $attachmentUrl = 'https://' . $json['container'] . '.s3.amazonaws.com/' . $json['key'];
        ```

        This URL can then used within an Anchors `href` attribute or an Images `src` attribute as you want.
      operationId: get_get_attachment_upload_url
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Attachment URL created and returned
          headers:
            location:
              description: The URL to be used to send the attachment data to
              schema:
                type: string
                example: 'https://cdn.filestackcontent.com/s7tdGfE5RRKFUxwsZoYv'
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
  '/{calendarKey}/events/{eventId}/comments':
    post:
      tags:
        - Event-Comments
      summary: Create a comment
      description: This endpoint creates a new comment for the given event.
      operationId: post_create_event_comment
      parameters:
        - name: calendarKey
          in: path
          required: true
          schema:
            type: string
          example: ks123456abc789def0
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9rid-]+'
          example: '123456'
        - name: clientTimezone
          in: query
          description: |-
            The timezone in which the creation or update time shall
                        be returned in. Defaults to the calendars timezone
          schema:
            type: string
          example: Europe/Busingen
        - name: format
          in: query
          description: The format in which the comment shall be returned.
          schema:
            default: html
            enum:
              - html
              - markdown
          example: html
        - name: inputFormat
          in: query
          description: The format in which the comment is presented.
          schema:
            default: html
            enum:
              - html
              - markdown
          example: html
      requestBody:
        description: New comment data
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: peter@example.com
                message:
                  type: string
                  example: '<p>Hi Mark, I need a projector for my presentation. Thanks</p>'
                name:
                  type: string
                  example: Peter
              type: object
      responses:
        '200':
          description: The information about the created comment
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/EventComment'
                  attachments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attachment.read'
                type: object
        '400':
          description: Generic Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
  '/{calendarKey}/events/{eventId}/comments/{commentId}':
    put:
      tags:
        - Event-Comments
      summary: Update a comment
      description: This endpoint updates an existing comment for the given event.
      operationId: put_update_event_comment
      parameters:
        - name: calendarKey
          in: path
          required: true
          schema:
            type: string
          example: ks123456abc789def0
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9a-z_-]+'
          example: '123456'
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
          example: '789012'
        - name: clientTimezone
          in: query
          description: |-
            The timezone in which the creation or update time shall
                        be returned in. Defaults to the calendars timezone
          schema:
            type: string
          example: Europe/Busingen
        - name: format
          in: query
          description: The format in which the comment shall be returned.
          schema:
            default: html
            enum:
              - html
              - markdown
          example: html
        - name: inputFormat
          in: query
          description: The format in which the comment is presented.
          schema:
            default: html
            enum:
              - html
              - markdown
          example: html
      requestBody:
        description: New comment data
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: peter@example.com
                  nullable: true
                message:
                  type: string
                  example: '<p>Hi Mark, I need a projector for my presentation. Thanks</p>'
                name:
                  type: string
                  example: Peter
                  nullable: true
              type: object
      responses:
        '200':
          description: The information about the created comment
          content:
            application/json:
              schema:
                properties:
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/EventComment'
                  attachments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Attachment.read'
                type: object
        '400':
          description: Generic Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
    delete:
      tags:
        - Event-Comments
      summary: Delete a comment
      description: This endpoint deletes the given comment for the given event.
      operationId: delete_delete_event_comment
      parameters:
        - name: calendarKey
          in: path
          required: true
          schema:
            type: string
          example: ks123456abc789def0
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9a-z_-]+'
          example: '123456'
        - name: commentId
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
          example: '789012'
      responses:
        '204':
          description: An empty body
        '400':
          description: Generic Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
  '/{calendarKeyOrId}/events':
    get:
      tags:
        - Events
      summary: Get Events Collection
      description: |-
        ## Retrieve a list of events for a specified date range.

        Noteworthy aspects of events in the responses:

        - **Recurring events:** For recurring events, the recurrence rule is evaluated and all event instances that fall between the given start and end date are returned.
      operationId: get_list_events
      parameters:
        - $ref: '#/components/parameters/event_notes_format'
        - name: startDate
          in: query
          description: 'The start of the date range to list events from, in YYYY-MM-DD format. If not specified this defaults to today'
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: 'The end of the date range to list events from (inclusive), in YYYY-MM-DD format. If not specified this defaults to tomorrow'
          required: false
          schema:
            type: string
            format: date
        - name: subcalendarId
          in: query
          description: 'Use this parameter to restrict the response to selected sub-calendars. This parameter can be applied multiple times to the URL. Eg. &subcalendarId[]=1234&subcalendarId[]=6789.'
          required: false
          schema:
            type: array
            items:
              type: integer
        - name: tz
          in: query
          description: The timezone to use for showing the returned events in. Defaults to the current calendars selected timezone
          required: false
          schema:
            type: string
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event.read'
                  timestamp:
                    description: 'Current unix timestamp on our servers, useful mainly when using modifiedSince'
                    type: integer
                type: object
        '400':
          description: Generic error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
    post:
      tags:
        - Events
      summary: Create an event
      operationId: post_create_event
      parameters:
        - $ref: '#/components/parameters/event_notes_input_format'
        - $ref: '#/components/parameters/event_notes_format'
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: New event data
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Event.create'
                - $ref: '#/components/schemas/Event.createRecurring'
      responses:
        '201':
          description: Created event
          content:
            application/json:
              schema:
                properties:
                  event:
                    $ref: '#/components/schemas/Event.write_response'
                  undo_id:
                    type: string
                type: object
        '400':
          description: Generic Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
  '/{calendarKeyOrId}/events/{eventId}':
    get:
      tags:
        - Events
      summary: Returns a single event
      operationId: get_view_event
      parameters:
        - $ref: '#/components/parameters/event_notes_format'
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9ridnew-]+'
      responses:
        '200':
          description: Updated event
          content:
            application/json:
              schema:
                properties:
                  event:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/Event.read'
                      - properties:
                          history:
                            $ref: '#/components/schemas/event_history'
                          reminders:
                            type: array
                            items:
                              $ref: '#/components/schemas/EventReminder'
                        type: object
                type: object
        '302':
          description: Redirecting
          headers:
            Location:
              schema:
                type: string
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
    put:
      tags:
        - Events
      summary: Update an event
      description: |-
        The event to be updated must be either identified by:

        * eventId in the path parameters + event's id field in the JSON request body (must match)
        * event's remote_id + ristart_dt (for recurring events) fields in the JSON request body
        * eventId in path set to 0 and remoteId + startTime (for recurring events) as query parameters

        Note that the eventId in case of recurring events is the ID of the
        series appended with "-rid-" appended with the timestamp of the start of
        the actual occurrence that you are updating. Based on this timestamp and
        the `redit` fields content, the affected instances are determined.

        So the eventId of an instance starting on Jan 1st 2035 at 12:00:00 UTC
        of the recurring event 123 would have the eventId 123-rid-2051265600

        The version should be provided either as version query parameter or in the request body if you use that.
        If you do not provide a version we cannot ensure data safety in case multiple people edit concurrently.
      operationId: put_update_event
      parameters:
        - $ref: '#/components/parameters/event_notes_input_format'
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9rid-]+'
      requestBody:
        description: Updated event data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event.update'
      responses:
        '200':
          description: Updated event
          content:
            application/json:
              schema:
                properties:
                  event:
                    $ref: '#/components/schemas/Event.write_response'
                  undo_id:
                    type: string
                type: object
        '400':
          description: General Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
    delete:
      tags:
        - Events
      summary: Delete an event
      description: |-
        The event to be deleted must be either identified by:

        - eventId in the path parameters
        - event's id field in the JSON request body
        - eventId in path set to 0 and event's remote_id + ristart_dt (for recurring events) fields in the JSON request body
        - eventId in path set to 0 and remoteId + startTime (for recurring events) as query parameters

        The version parameter is optional and can be used to prevent concurrent users from overwriting each others' changes.
        It implements a soft-locking parameter. If a version parameter is provided, the delete request succeeds only if the
        value matches the version value stored with the event. If the version parameter is not provided, version checks are
        skipped and the request proceeds.
      operationId: delete_delete_event
      parameters:
        - name: version
          in: query
          description: Version string used for soft-locking.
          required: false
          schema:
            type: string
        - name: redit
          in: query
          description: Specifies how the deletion is applied to recurring events.
          required: false
          schema:
            default: single
            enum:
              - single
              - future
              - all
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9rid-]+'
      requestBody:
        description: Event to delete
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event.delete'
      responses:
        '200':
          $ref: '#/components/responses/undo_id'
        '400':
          description: General Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
  '/{calendarKeyOrId}/events/{eventId}.ics':
    get:
      tags:
        - Events
      summary: Export a single event in iCalendar format
      description: |-
        This endpoint retrieves a specific event and returns it in iCalendar/ICS format.

        **Important:** This request must be addressed to the `teamup.com` host (not `api.teamup.com`) and does not require an API key.
        This allows the request to be used with a web browser. Most web browsers are configured to open a calendar application when
        receiving a response of type `text/calendar`. This can be used to easily export an event to a third-party calendar program.
      operationId: get_export_event
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event in iCalendar / ICS format
          content:
            text/calendar: {}
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
  '/{calendarKeyOrId}/events?modifiedSince={modifiedSince}':
    get:
      tags:
        - Events
      summary: Fetch modified events
      description: |-
        This endpoint can be used to periodically synchronize a calendar client with the calendar server. If you pass
        the `modifiedSince` parameter the returned events will be a list of events that changed recently.

        Notice that the response also contains a property "timestamp" representing the server time as of which all
        changes are included in the response. It is recommended to use this timestamp in the next request for changes
        as the value of the modifiedSince parameter. This will ensure that a change is never missed.

        Noteworthy aspects of events in modifiedSince responses:

        - **Deleted Events:** Responses include deleted events which can be recognized by the fact their `delete_dt`
              attribute is set to a non-null value. This allows a remote database to synchronize deletions.
        - **Date Range:** It is currently not possible to restrict the changes to a calendar date range.
        - **Recurring Events:** For repeating events, the reply contains only the master event with the repeating rule
              but does not return each repeating event instance. Attribute end_dt represents the end of the entire
              repeating series. The duration of one event instance is returned in attribute duration. If repeating
              instances are needed, the API endpoint Get Events Collection must be used to fetch events.
        - **Changes are tracked for a maximum of 30 days:** The value of the modifiedSince parameter can be at most
              30 days in the past.
      operationId: get_list_events_modified
      parameters:
        - name: modifiedSince
          in: path
          description: 'A timestamp at most 30 days into the past. All events that were created, updated or deleted after this time will be returned.'
          required: true
          schema:
            type: integer
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event.read'
                  timestamp:
                    description: 'Current unix timestamp on our servers, useful mainly when using modifiedSince'
                    type: integer
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
  '/{calendarKeyOrId}/events?query={query}':
    get:
      tags:
        - Events
      summary: Search Events
      description: |-
        ## Search for events using a query string

        Passing the `query` parameter allows you to filter returned events using a search query.

        Noteworthy aspects of events in search responses:

        - **Recurring events:** For recurring events, the recurrence rule is evaluated and all event instances that fall between the given start and end date are returned.
      operationId: get_list_events_search
      parameters:
        - $ref: '#/components/parameters/event_notes_format'
        - name: startDate
          in: query
          description: 'The start of the date range to list events from, in YYYY-MM-DD format. If not specified this defaults to today'
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: 'The end of the date range to list events from (inclusive), in YYYY-MM-DD format. If not specified this defaults to tomorrow'
          required: false
          schema:
            type: string
            format: date
        - name: 'subcalendarId[]'
          in: query
          description: 'Use this parameter to restrict the response to selected sub-calendars. This parameter can be applied multiple times to the URL. Eg. &subcalendarId[]=1234&subcalendarId[]=6789.'
          required: false
          schema:
            type: array
            items:
              type: integer
        - name: query
          in: path
          description: 'Query string used to search for events. See the [Search Guide](https://calendar.teamup.com/kb/searching-teamup-calendar/) for supported query syntax and features.'
          required: true
          schema:
            type: string
            maxLength: 100
            minLength: 2
        - name: tz
          in: query
          description: The timezone to use for showing the returned events in. Defaults to the current calendars selected timezone
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: The offset for paged results
          required: false
          schema:
            type: integer
            default: 0
        - name: limit
          in: query
          description: The number of events to be returned at maximum for paged results
          required: false
          schema:
            type: integer
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of events
          content:
            application/json:
              schema:
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event.read'
                  timestamp:
                    description: 'Current unix timestamp on our servers, useful mainly when using modifiedSince'
                    type: integer
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
  '/{calendarKeyOrId}/events/{eventId}/history':
    get:
      tags:
        - Events
      summary: Get Event History
      description: 'Read the change history of an event. This includes the creation date, the link used to create the event, the last modification date and the link used to modify the event.'
      operationId: get_view_event_history
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9rid-]+'
      responses:
        '200':
          description: Event change history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event_history'
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
  '/{calendarKeyOrId}/events/{eventId}/aux':
    get:
      tags:
        - Events
      summary: Get Auxiliary Information
      description: 'Read auxiliary event information. This includes the event change history, events comments and signups, as well as reminders.'
      operationId: get_event_auxiliar_information
      parameters:
        - $ref: '#/components/parameters/event_notes_format'
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            pattern: '[0-9rid-]+'
      responses:
        '200':
          description: Event auxiliary information
          content:
            application/json:
              schema:
                properties:
                  history:
                    $ref: '#/components/schemas/event_history'
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventComment'
                  signups:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventSignup'
                  reminders:
                    type: array
                    items:
                      $ref: '#/components/schemas/EventReminder'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
  '/{calendarKey}/events/{eventId}/pointer':
    post:
      tags:
        - Events
      summary: Get event page URL
      description: |-
        This endpoint can be used to get the URL to an event web page. Each calendar event has
                its own web page that can be used to share an event with users that don't have access to the calendar.
                The event page is read-only but optionally supports comments and signups. It features tools to share the
                event with other calendar products. Access to the event page is protected with a long random string
                that is part of the URL. A login is not required.

                The URL to the event page is returned in the Location header of the response.
      operationId: post_create_pointer
      parameters:
        - name: calendarKey
          in: path
          required: true
          schema:
            type: string
          example: ksmh1v99y2u1w168qn
        - name: eventId
          in: path
          required: true
          schema:
            type: string
          example: '123456'
      responses:
        '201':
          description: The information about the created pointer
          content:
            application/json:
              schema:
                properties:
                  pointer:
                    type: string
                  url:
                    type: string
                type: object
  '/{calendarKeyOrId}/events/undo/{undoId}':
    put:
      tags:
        - Events
      summary: Undo an event action
      description: |-
        This endpoint can be used to revert a recent event change (event creation, deletion or update).

        When you create, update or delete an event, the response returns an undo identifier. To test this endpoint,
        first create, update or delete an event and obtain the undo id from the response. Then, add the undo in tab
        "Params" as a value for variable undoId.

        Undo is available only for an hour after the initial action. Expired undo ids result in an error.
      operationId: put_event_undo
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
          example: ksmh1v99y2u1w168qn
        - name: undoId
          in: path
          required: true
          schema:
            type: string
          example: 3f4394eb85b5609babbb
      responses:
        '204':
          description: The previous action was undone successfully
        '400':
          description: Undo failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/api_error'
              examples:
                undo_expired:
                  summary: Undo expired
                  value:
                    error:
                      id: event_undo_expired
                      title: Undo failed
                      message: 'Sorry, undoing your change failed because undo information already expired.'
                undo_conflicted:
                  summary: Validation failed
                  value:
                    error:
                      id: event_validation_conflict
                      title: Conflict with another user
                      message: 'The event was changed by another user while you were editing. Please close the event editor, refresh the calendar and edit again.'
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
  '/{calendarKeyOrId}/keys':
    get:
      tags:
        - Access Keys
      summary: Get a collection of access keys for the provided calendar key.
      description: This endpoint returns a list of all access keys for the calendar.
      operationId: get_list_keys
      parameters:
        - name: filterBy
          in: query
          description: 'Filter records by the name of the link, user and/or group name'
          schema:
            type: string
            default: ''
        - name: offset
          in: query
          description: 'Used for pagination: skip {offset} records before returning the results'
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: 'Used for pagination: specify the maximum number of records to be returned.'
          required: false
          schema:
            type: integer
        - name: type
          in: query
          description: 'Filter records by type: anonymous|user|group'
          schema:
            type: string
            default: ''
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of Access Keys
          content:
            application/json:
              schema:
                properties:
                  keys:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccessKey.read'
                type: object
        '400':
          description: Generic Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
    post:
      tags:
        - Access Keys
      summary: Create an access key
      operationId: post_create_key
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: New Access Key data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessKey.create'
      responses:
        '201':
          description: The just created Access Key
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/AccessKey.read'
                type: object
        '400':
          description: Generic Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
  '/{calendarKeyOrId}/keys/{keyId}':
    get:
      tags:
        - Access Keys
      summary: Get a single access key
      description: This API endpoint can be used to retrieve an access key.
      operationId: get_get_key
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      responses:
        '200':
          description: One Access Key
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/AccessKey.read'
                type: object
        '400':
          description: Generic Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
    put:
      tags:
        - Access Keys
      summary: Update an existing key
      operationId: put_update_key
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      requestBody:
        description: Updated Access Key data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessKey.update'
      responses:
        '200':
          description: The just updated Access Key
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/AccessKey.read'
                type: object
        '400':
          description: Generic Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
    delete:
      tags:
        - Access Keys
      summary: Delete an access key
      description: The access key will be removed without further notice. **This can not be undone!**
      operationId: delete_delete_key
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
    patch:
      tags:
        - Access Keys
      summary: Update an existing key
      operationId: patch_patch_key
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: keyId
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      requestBody:
        description: Updated Access Key data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessKey.patch'
      responses:
        '200':
          description: The just updated Access Key
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/AccessKey.read'
                type: object
        '400':
          description: Generic Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
  '/{calendarKeyOrId}/subcalendars':
    get:
      tags:
        - Sub-Calendars
      summary: Get a collection of sub-calendars
      description: |-
        This API endpoint returns a list of all sub-calendars for the addressed calendar.

        Please note that if the used calendar key has administration permission, then active and inactive
        sub-calendars are returned. Otherwise, only active sub-calendars are returned.
      operationId: get_list_resources
      parameters:
        - name: includeInactive
          in: query
          description: 'If true, inactive sub-calendars are included in the response.'
          schema:
            type: boolean
            default: false
        - name: offset
          in: query
          description: 'Used for pagination: skip {offset} records before returning the results'
          required: false
          schema:
            type: integer
        - name: limit
          in: query
          description: 'Used for pagination: specify the maximum number of records to be returned.'
          required: false
          schema:
            type: integer
        - name: filterBy
          in: query
          description: Filter records by subcalendar name
          schema:
            type: string
            default: ''
        - name: keyId
          in: query
          description: Filter subcalendars by key.
          required: false
          schema:
            type: integer
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of sub-calendars.
          content:
            application/json:
              schema:
                properties:
                  subcalendars:
                    type: array
                    items:
                      $ref: '#/components/schemas/SubCalendar.read'
                type: object
        '400':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
    post:
      tags:
        - Sub-Calendars
      summary: Create a sub-calendar
      description: This API endpoint can be used to create a new sub-calendar.
      operationId: post_create_resource
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: New sub-calendar data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubCalendar.create'
      responses:
        '201':
          description: A single sub-calendar
          content:
            application/json:
              schema:
                properties:
                  subcalendar:
                    $ref: '#/components/schemas/SubCalendar.read'
                type: object
        '400':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
  '/{calendarKeyOrId}/subcalendars/{resourceId}':
    get:
      tags:
        - Sub-Calendars
      summary: Read a sub-calendar
      description: This API endpoint returns a single sub-calendar with all available details.
      operationId: get_get_resource
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      responses:
        '200':
          description: A single sub-calendar
          content:
            application/json:
              schema:
                properties:
                  subcalendar:
                    $ref: '#/components/schemas/SubCalendar.read'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
    put:
      tags:
        - Sub-Calendars
      summary: Update a sub-calendar
      description: This API endpoint can be used to update a sub-calendar.
      operationId: put_update_resource
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      requestBody:
        description: Updated sub-calendar data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubCalendar.update'
      responses:
        '200':
          description: A single sub-calendar
          content:
            application/json:
              schema:
                properties:
                  subcalendar:
                    $ref: '#/components/schemas/SubCalendar.read'
                type: object
        '400':
          description: Generic Error
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Subcalendar not found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
    delete:
      tags:
        - Sub-Calendars
      summary: Delete a sub-calendar
      description: This API endpoint can be used to delete a sub-calendar.
      operationId: delete_delete_resource
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                properties:
                  key:
                    $ref: '#/components/schemas/api_error'
                type: object
    patch:
      tags:
        - Sub-Calendars
      summary: Patch a sub-calendar
      description: This API endpoint can be used to patch a sub-calendar.
      operationId: patch_patch_resource
      parameters:
        - name: calendarKeyOrId
          in: path
          required: true
          schema:
            type: string
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
            pattern: \d+
      requestBody:
        description: Changed sub-calendar data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubCalendar.patch'
      responses:
        '200':
          description: A single sub-calendar
          content:
            application/json:
              schema:
                properties:
                  subcalendar:
                    $ref: '#/components/schemas/SubCalendar.read'
                type: object
        '401':
          $ref: '#/components/responses/login_required'
        '403':
          $ref: '#/components/responses/account_no_permission'
components:
  schemas:
    App.date_time:
      title: Read apps date-time configuration
      required:
        - tz_dynamic
      properties:
        tz_dynamic:
          type: boolean
        tz:
          title: Timezone of this calendar as specified in the Olson tz database.
          type: string
          nullable: true
      type: object
    App.generalsettings:
      title: Read general app configuration
      required:
        - admin_email
        - user_signup_enabled
        - icsfeeds_enabled
        - rssfeeds_enabled
        - onetomany_enabled
        - onetomany_layout
      properties:
        notes:
          title: 'Notes about the application, for example to mark examples that will be deleted after a few days.'
          type: string
          nullable: true
        about:
          title: About text. This will be displayed in an optional box in the left-hand navigation bar. Up to 1000 characters.
          type: string
          default: ''
        admin_email:
          title: Email address of the application administrator.
          type: string
        user_signup_enabled:
          type: boolean
        icsfeeds_enabled:
          type: boolean
        rssfeeds_enabled:
          type: boolean
        onetomany_enabled:
          title: Whether one-to-many is enabled
          type: boolean
        onetomany_layout:
          type: integer
          enum:
            - 0
            - 1
      type: object
    AppAttributes.fields:
      title: Read fields configurtation
      properties:
        definitions:
          title: The customisable list of event fields
          type: array
          items:
            $ref: '#/components/schemas/FieldDefinition'
          default: []
      type: object
    AppAttributes.identity:
      title: Read identity configurtation
      required:
        - customize
        - show_custom_logo
      properties:
        title:
          title: String of the application.
          type: string
          default: Teamup Calendar
        header_show_logo:
          title: A flag that indicates if the logo should be displayed or not.
          type: boolean
          default: false
        logo_uri:
          title: The URI to the custom logo.
          type: string
          default: ''
        header_background_color:
          title: The header background color defined as hex string in RGB format.
          type: string
          default: '#FFFFFF'
        header_font_color:
          title: The header font color defined as hex string in RGB format.
          type: string
          default: '#283842'
        customize:
          title: A flag that indicates if the header customization is active or not.
          type: boolean
        show_custom_logo:
          title: A flag that indicates if the logo should be displayed or not.
          type: boolean
      type: object
    AppAttributes.date_time:
      title: Read date-time configurtation
      required:
        - use_24h_times
        - tz_show
        - time_range_start
        - time_range_end
      properties:
        date_locale:
          title: Datetime locale code of user interface.
          description: |-
            Currently supported values are 'en' for 'mm/dd/yyyy' format, 'en_GB'
            for 'dd/mm/yyyy' format and 'de' for 'dd.mm.yyyy' format.
          type: string
          default: en
          enum:
            - en
            - en_GB
            - de
        week_start:
          title: First day of week.
          type: integer
          default: 1
        scroll_start_hour:
          title: 'The default hour of the day at which to set the body scroll position on view load (defaults to 7, which equals 7am / 07:00)'
          type: integer
          default: 7
        default_event_duration:
          title: Default event duration (used for new events only)
          type: integer
          default: -1
        start_date_type:
          title: Flag that indicates how the start date is set after loading a calendar
          description: ..
          type: string
          default: current
          enum:
            - current
            - pattern
            - future_date
            - specific
            - past_date
        start_date:
          title: Start date to set after the calendar is initially loaded.
          description: This is only used if _start_Date_Type is set to "specific"
          type: string
          default: '1970-01-01'
          example: '2023-09-23'
        start_date_days:
          title: Number of days
          description: |-
            This configuration is used only if start_date_type is "past_date" or "future_date"

            It will set the calendar start date {x} days in the past or future
          type: integer
          default: null
          nullable: true
        start_date_pattern:
          title: A strings that defines how the start date is to be calculated when a calendar is loaded.
          description: This is only used if the start_date_type is set to "pattern"
          type: string
          default: y1
          enum:
            - jan1
            - feb1
            - mar1
            - apr1
            - may1
            - jun1
            - jul1
            - aug1
            - sep1
            - oct1
            - nov1
            - dec1
            - m1
            - q1
            - y1
            - today
        use_24h_times:
          type: boolean
        tz_show:
          title: Whether the timezone should be shown or not.
          type: boolean
        time_range_start:
          title: The calendar start hour
          type: integer
        time_range_end:
          title: The calendar end hour
          type: integer
      type: object
    AppAttributes.calendar_views:
      title: Read calendar-view configurtation
      required:
        - show_multiday_view
        - show_multiweek_view
        - multiday_number_of_days
        - week_hide_weekend
        - multiweek_number_of_weeks
        - list_date_range
        - list_group_by
        - list_show_details
        - agenda_date_range
        - agenda_show_details
        - year_number_of_months
      properties:
        default_view:
          title: Default view when application starts.
          type: string
          default: W
          enum:
            - T
            - TA
            - S
            - D
            - MD
            - W
            - MW
            - M
            - A
            - L
            - 'Y'
            - TI
        show_scheduler_view:
          title: Flag that indicates if scheduler view is enabled.
          type: boolean
          default: true
        show_timeline_view:
          title: Flag that indicates if timeline view is enabled.
          type: boolean
          default: true
        show_table_view:
          title: Flag that indicates if table view is enabled.
          type: boolean
          default: true
        show_day_view:
          title: Flag that indicates if day view is enabled.
          type: boolean
          default: true
        show_week_view:
          title: Flag that indicates if week view is enabled.
          type: boolean
          default: true
        show_month_view:
          title: Flag that indicates if month view is enabled.
          type: boolean
          default: true
        show_list_view:
          title: Flag that indicates if list view is enabled.
          type: boolean
          default: true
        show_tiles_view:
          type: boolean
          default: true
        tiles_date_range:
          type: string
          default: 2weeks
          enum:
            - day
            - week
            - 2weeks
            - month
            - 3months
            - 6months
            - year
        tiles_group_by:
          type: string
          default: month
        tiles_size:
          type: string
          default: medium
        tiles_order:
          type: string
          default: asc
        table_cells:
          title: Which table cells should be shown in Table-view
          description: |-
            This contains a JSON-String that contains the configuration which fields are to be shown.

            An example would be something like this:

            [{"id":"me"}]
          type: string
          default: ''
        show_agenda_view:
          title: Flag that indicates if agenda view is enabled.
          type: boolean
          default: true
        scheduler_date_range:
          title: Default date range for scheduler view.
          type: string
          default: single-day
          enum:
            - single-day
            - multi-day
            - week
            - month
            - year
        scheduler_amount_of_unit:
          title: Default number of unit for scheduler view.
          type: integer
          default: 1
        scheduler_resolution:
          title: Default zoom level for scheduler view.
          type: string
          default: 30m
          enum:
            - 1m
            - 3m
            - 5m
            - 10m
            - 15m
            - 30m
            - 1h
            - 2h
            - 4h
            - 6h
            - 12h
            - 1d
            - 1w
            - 1y
        scheduler_hide_empty:
          title: Default hide empty flag for scheduler view.
          type: boolean
          default: false
        timeline_default_date_range:
          title: Default date range for timeline view
          type: string
          default: week
          enum:
            - day
            - week
            - 2weeks
            - month
            - 3months
            - 6months
            - year
        timeline_default_number_of_days:
          title: Default number of days for timeline view
          type: integer
          default: 5
        timeline_default_number_of_weeks:
          title: Default number of weeks for timeline view
          type: integer
          default: 4
        timeline_default_zoom_level:
          title: Default zoom level for timeline view
          type: integer
          default: 3
        table_default_date_range:
          title: Default date range for table view
          type: string
          default: week
        table_default_number_of_days:
          title: Default number of days for table view
          type: integer
          default: 5
        table_default_number_of_weeks:
          title: Default number of weeks for table view
          type: integer
          default: 4
        table_default_wrap_content:
          title: Default wrap content for table view
          type: boolean
          default: false
        table_default_show_sum:
          title: Default show sum for table view
          type: boolean
          default: true
        show_year_view:
          title: Flag that indicates if year view is enabled
          type: boolean
          default: true
        show_multiday_view:
          title: 'Returns true, if the multiday view is enabled, false otherwise. If flag has not been set, 1 is returned.'
          type: boolean
        show_multiweek_view:
          title: 'Returns true, if the multi week view is enabled, false otherwise. If flag has not been set, 1 is returned.'
          type: boolean
        multiday_number_of_days:
          title: Number of days shown in multi-day view.
          type: integer
        week_hide_weekend:
          title: Hide weekend days in weekly view.
          type: boolean
        multiweek_number_of_weeks:
          title: Number of weeks shown in multi-week view.
          type: integer
        list_date_range:
          title: 'Default date range for list view. Supported values are ''day'', ''week'', ''month'', ''3months'', ''year''.'
          type: string
          enum:
            - day
            - week
            - 2weeks
            - month
            - 3months
            - 6months
            - year
        list_group_by:
          title: 'Default grouping for list view. Support values are ''none'', ''month'', ''week''.'
          type: string
          enum:
            - none
            - week
            - month
        list_show_details:
          title: Show details on list view.
          type: boolean
        agenda_date_range:
          title: 'Default date range for agenda view. Supported values are ''day'', ''week'', ''month'', ''3months'', ''year''.'
          type: string
        agenda_show_details:
          title: Show details on agenda view.
          type: boolean
        year_number_of_months:
          title: Number of months for year view
          type: integer
      type: object
    AppAttributes.generalsettings:
      title: Read general attributes configurtation
      properties:
        language:
          title: Language code of user interface language.
          type: string
          default: en
          enum:
            - en
            - en_GB
            - cs
            - da
            - de
            - es
            - fi
            - fr
            - hr
            - hu
            - it
            - ja_JP
            - nb
            - nl
            - pl
            - pt_PT
            - ro
            - ru_RU
            - sk
            - sr
            - sv
            - sl
            - tr
            - zh_CN
            - zh_TW
        control_panel_default_state:
          title: Default state of control panel (visible or collapsed).
          type: string
          default: visible
          enum:
            - visible
            - collapsed
        about_enabled:
          title: Flag that indicates if the about box is enabled or not.
          type: boolean
          default: true
        about_title:
          title: Allow overlapping events or not.
          type: string
          default: ''
        event_sharing_enabled:
          title: Whether events can be shared
          type: boolean
          default: true
        enabled_event_sharing_services:
          title: Which sharing services can be used
          description: Note that you must also check the global isEventSharingEnabled flag to know if a service is enabled in practice.
          properties:
            page:
              description: Share events as a stand-alone web page.
              type: boolean
            add-to-calendar:
              description: Share events as a link.
              type: boolean
            facebook:
              description: Share events on Facebook.
              type: boolean
            twitter:
              description: Share events on X.
              type: boolean
            linkedin:
              description: Share events on Linkedin.
              type: boolean
            whatsapp:
              description: Share events on WhatsApp.
              type: boolean
            xing:
              description: Share events on Xing.
              type: boolean
            email:
              description: Share events through email.
              type: boolean
            teamup:
              description: Send events to other Teamup calendars.
              type: boolean
            google:
              description: Send events to Google Calendar.
              type: boolean
            outlook:
              description: Send events to Outlook.
              type: boolean
            outlook-web:
              description: Send events to Outlook on the Web.
              type: boolean
            outlook-com:
              description: Send events to Outlook.com.
              type: boolean
            apple:
              description: Send events to Apple Calendar.
              type: boolean
            yahoo:
              description: Send events to Yahoo Calendar.
              type: boolean
            other:
              description: Send events to other calendars as an *.ics file.
              type: boolean
          type: object
          default:
            xing: false
            yahoo: false
            page: true
            teamup: true
            facebook: true
            twitter: true
            linkedin: true
            whatsapp: true
            email: true
            google: true
            outlook: true
            outlook-web: true
            outlook-com: true
            apple: true
            other: true
      type: object
    Calendar.read:
      title: Read Calendar
      required:
        - timezone
        - title
        - language
      properties:
        email_admin:
          title: Email address of administrator
          type: string
          nullable: true
        timezone:
          title: Timezone of this calendar as specified in the Olson tz database.
          type: string
        license:
          title: Calendar subscription / license plan.
          description: ''
          type: string
          default: standard
        title:
          description: The title of the new Calendar
          type: string
        language:
          description: The language to be used for the calendar
          type: string
      type: object
    Calendar.create:
      title: Create Calendar
      required:
        - timezone
        - title
        - language
        - subscription
      properties:
        email_admin:
          title: Email address of administrator
          type: string
          nullable: true
        timezone:
          title: Timezone of this calendar as specified in the Olson tz database.
          type: string
        title:
          description: The title of the new Calendar
          type: string
        language:
          description: The language to be used for the calendar
          type: string
        tpl:
          description: The template to base the calendar on
          type: string
          default: ''
        subscription:
          title: Calendar subscription / license plan.
          description: The subscription plan for the new calendar
          type: string
      type: object
    SubCalendar.patch:
      title: Partially update Sub-Calendar
      description: All parameters are optional. Not existing values will not be overwritten
      properties:
        name:
          title: Sub-calendar name.
          type: string
          example: Peter's Schedule
          nullable: true
        active:
          title: Active status of sub-calendar.
          type: boolean
          default: true
        color:
          title: Color of sub-calendar.
          description: |-
            The color id references one of the 48 colors. See
            [this reference list](https://teamup.stoplight.io/docs/api/ZG9jOjI4Mzk0ODA5-colors)
            for an overview of supported colors.
          type: integer
          default: 17
        overlap:
          title: Allow overlapping events?
          description: Flag that indicates if overlapping events are allowed or not for this sub-calendar.
          type: boolean
          default: true
        type:
          title: Type of sub-calendar.
          description: |-
            Two types of sub-calendars are supported. If type = 1, the sub-calendar is automatically fed
            by an iCalendar feed and is read-only. If type = 0, the sub-calendar is a standard sub-calendars
            that can be used to read/write events.

            The _type_ attribute is returned only if the calendar key used to access the calendar has administration
            permission.
          type: integer
          default: 0
        remote_id:
          title: Remote identifier.
          description: |-
            The remote identifier is an identifier that can be assigned to a sub-calendar by 6a third system
            using the API. The remote identifier can be used in most API operations instead of the native
            record id. This facilitates the integration with third-party systems.

            The remote identifier is optional.
          type: string
          example: remote-id-1234-5678-90
          nullable: true
        feed_url:
          description: This is required when setting the feed-status to 1 or 2
          type: string
          example: 'https://example.com/calendar.ics'
          nullable: true
        polling_interval:
          title: The interval in minutes between refreshing the sub-calendar from the feed source
          description: This is required when the feed-status is set to 1
          type: integer
          example: 120
          nullable: true
      type: object
    SubCalendar.update:
      title: Update Sub-Calendar
      description: When optional parameters are missing they will be replaced with the respective default values.
      required:
        - name
      properties:
        name:
          title: Sub-calendar name.
          type: string
          maxLength: 255
          minLength: 1
          example: Peter's Schedule
        active:
          title: Active status of sub-calendar.
          type: boolean
          default: true
        color:
          title: Color of sub-calendar.
          description: |-
            The color id references one of the 48 colors. See
            [this reference list](https://teamup.stoplight.io/docs/api/ZG9jOjI4Mzk0ODA5-colors)
            for an overview of supported colors.
          type: integer
          default: 17
        overlap:
          title: Allow overlapping events?
          description: Flag that indicates if overlapping events are allowed or not for this sub-calendar.
          type: boolean
          default: true
        type:
          title: Type of sub-calendar.
          description: |-
            Two types of sub-calendars are supported. If type = 1, the sub-calendar is automatically fed
            by an iCalendar feed and is read-only. If type = 0, the sub-calendar is a standard sub-calendars
            that can be used to read/write events.

            The _type_ attribute is returned only if the calendar key used to access the calendar has administration
            permission.
          type: integer
          default: 0
        remote_id:
          title: Remote identifier.
          description: |-
            The remote identifier is an identifier that can be assigned to a sub-calendar by 6a third system
            using the API. The remote identifier can be used in most API operations instead of the native
            record id. This facilitates the integration with third-party systems.

            The remote identifier is optional.
          type: string
          example: remote-id-1234-5678-90
          nullable: true
        feed_url:
          description: This is required when setting the feed-status to 1 or 2
          type: string
          example: 'https://example.com/calendar.ics'
          nullable: true
        polling_interval:
          title: The interval in minutes between refreshing the sub-calendar from the feed source
          description: This is required when the feed-status is set to 1
          type: integer
          example: 120
          nullable: true
      type: object
    SubCalendar.create:
      title: Create Sub-Calendar
      required:
        - name
      properties:
        name:
          title: Sub-calendar name.
          type: string
          maxLength: 255
          minLength: 1
          example: Peter's Schedule
        active:
          title: Active status of sub-calendar.
          type: boolean
          default: true
        color:
          title: Color of sub-calendar.
          description: |-
            The color id references one of the 48 colors. See
            [this reference list](https://teamup.stoplight.io/docs/api/ZG9jOjI4Mzk0ODA5-colors)
            for an overview of supported colors.
          type: integer
          default: 17
        overlap:
          title: Allow overlapping events?
          description: Flag that indicates if overlapping events are allowed or not for this sub-calendar.
          type: boolean
          default: true
        type:
          title: Type of sub-calendar.
          description: |-
            Two types of sub-calendars are supported. If type = 1, the sub-calendar is automatically fed
            by an iCalendar feed and is read-only. If type = 0, the sub-calendar is a standard sub-calendars
            that can be used to read/write events.

            The _type_ attribute is returned only if the calendar key used to access the calendar has administration
            permission.
          type: integer
          default: 0
        remote_id:
          title: Remote identifier.
          description: |-
            The remote identifier is an identifier that can be assigned to a sub-calendar by 6a third system
            using the API. The remote identifier can be used in most API operations instead of the native
            record id. This facilitates the integration with third-party systems.

            The remote identifier is optional.
          type: string
          example: remote-id-1234-5678-90
          nullable: true
        feed_url:
          description: This is required when setting the feed-status to 1 or 2
          type: string
          example: 'https://example.com/calendar.ics'
          nullable: true
        polling_interval:
          title: The interval in minutes between refreshing the sub-calendar from the feed source
          description: This is required when the feed-status is set to 1
          type: integer
          example: 120
          nullable: true
      type: object
    SubCalendar.read:
      title: Read Sub-Calendar
      required:
        - id
        - creation_dt
      properties:
        id:
          title: Unique sub-calendar identifier.
          type: integer
          example: 12345
        name:
          title: Sub-calendar name.
          type: string
          example: Peter's Schedule
          nullable: true
        active:
          title: Active status of sub-calendar.
          type: boolean
          default: true
        color:
          title: Color of sub-calendar.
          description: |-
            The color id references one of the 48 colors. See
            [this reference list](https://teamup.stoplight.io/docs/api/ZG9jOjI4Mzk0ODA5-colors)
            for an overview of supported colors.
          type: integer
          default: 17
        overlap:
          title: Allow overlapping events?
          description: Flag that indicates if overlapping events are allowed or not for this sub-calendar.
          type: boolean
          default: true
        type:
          title: Type of sub-calendar.
          description: |-
            Two types of sub-calendars are supported. If type = 1, the sub-calendar is automatically fed
            by an iCalendar feed and is read-only. If type = 0, the sub-calendar is a standard sub-calendars
            that can be used to read/write events.

            The _type_ attribute is returned only if the calendar key used to access the calendar has administration
            permission.
          type: integer
          default: 0
        attributes:
          title: Optional configuration of a sub-calendar.
          description: |-
            The _attributes_ property holds configuration and status values for sub-calendars representing iCalendar feeds.
            This property is returned only if the sub-calendar is of type = 1 (icalendar feed) and the calendar key used to
            access the calendar has administration permission.
          type: object
          example:
            hash: db94293af096df7a7106ba9c9579e428
            status: ''
            feed_url: 'https://calendar.google.com/calendar/ical/en.usa%23holiday%40group.v.calendar.google.com/public/basic.ics'
            failure_count: '0'
            next_fetch_dt: '1/5/2022, 8:12 am'
            last_fetched_dt: '12/6/2021, 8:12 am'
            polling_interval: 43200
          nullable: true
        remote_id:
          title: Remote identifier.
          description: |-
            The remote identifier is an identifier that can be assigned to a sub-calendar by 6a third system
            using the API. The remote identifier can be used in most API operations instead of the native
            record id. This facilitates the integration with third-party systems.

            The remote identifier is optional.
          type: string
          example: remote-id-1234-5678-90
          nullable: true
        creation_dt:
          title: Creation date
          description: Date and time when sub-calendar was created.
          type: string
          format: date-time
          readOnly: true
          example: '2021-02-23T12:03:07+00:00'
        update_dt:
          title: Last update date
          description: Date and time when sub-calendar was last updated.
          type: string
          format: date-time
          readOnly: true
          example: null
          nullable: true
        readonly:
          title: Flag that indicates if this sub-calendar is readonly.
          description: 'This is a calculated field, not a field stored in the database.'
          type: boolean
          default: false
        feed_active:
          title: Flag indicating if a feed is active.
          description: |-
            This flag is only returned for sub-calendars that represent iCalendar feeds. It
            returns true if the feed is currently actively synchronized. If synchronization
            has stopped, false is returned. Synchronization stops after more than 10 synchronization
            failures in a row. The most common reason for the synchronization to fail is that the feed
            source cannot be read.
          type: boolean
          default: true
        link_permissions:
          title: List of permissions for this sub-calendar.
          description: |-
            This property holds the permission configuration of all calendars links. It is returned only
            if the calendar key used to access the calendar has administration permission.
          type: object
          example:
            '5809896':
              share_type: all_subcalendars
              permission: admin
              user_id: null
            '9015686':
              share_type: all_subcalendars
              permission: read_only
              user_id: null
          nullable: true
          additionalProperties:
            properties:
              share_type:
                type: string
              permission:
                type: string
              user_id:
                type: string
                nullable: true
            type: object
      type: object
    AccessKey.patch:
      title: Partially update AccessKey
      description: 'All parameters are optional, Not existing values will not be overwritten'
      required:
        - subcalendar_permissions
      properties:
        name:
          title: The name given to this key.
          description: The name is between 1 and 100 characters long and must be unique.
          type: string
          maxLength: 100
          nullable: true
        role:
          title: Defines the permission the access key has on sub-calendars.
          description: |-
            If the attribute `share_type` is set to *all_subcalendars*, then this attribute defines the common permission
            the access key has for all sub-calendars.

            The following permission values are supported:
              * admin
              * modify
              * modify_from_same_link
              * add_only
              * read_only
              * modify_from_same_link_without_details
              * add_only_without_details
              * read_only_without_details
              * no_access

            For more details about each permission, visit the Settings -> Sharing section of your calendar
          type: string
          default: no_access
          enum:
            - admin
            - modify
            - modify_from_same_link
            - add_only
            - read_only
            - modify_from_same_link_without_details
            - add_only_without_details
            - read_only_without_details
            - no_access
            - mixed
        active:
          title: Whether the access key is active or not
          type: boolean
          default: true
        admin:
          title: Flag indicating if the key has administrator permission and therefore can manipulate the calendar settings.
          description: Flag that indicates if this key provides access to all resources or only selected resources.
          type: boolean
          default: false
        require_password:
          title: Indicates if a password is required when using this access key
          description: Flag that indicates if the link requires a password.
          type: boolean
          default: false
        password:
          title: The password to be used in addition to this access-key
          description: 'String representing a password hash. The password is hashed by {@see \PasswordChecker}.'
          type: string
          nullable: true
        share_type:
          title: Define whether the share-type is declared for all subcalendars or only for a specified subset.
          description: A value of `selected_subcalendars` requires the `subcalendar_permissions` to be available.
          type: string
          default: all_subcalendars
          enum:
            - all_subcalendars
            - selected_subcalendars
        subcalendar_permissions:
          title: An array of pairs of sub-calendar identifier and permission.
          description: |-
            If attribute `share_type` is set to ` selected_subcalendars`, then this attribute
            defines the individual permissions this access key has for each sub-calendars.
            The value of this attribute is an array of key/value pairs. The key is the
            id of a sub-calendar, the value is the permission this access key has for
            that sub-calendar. Please see Create Access Key for an example.

            The following permission values are supported:

             * admin
             * modify
             * modify_from_same_link
             * add_only
             * read_only
             * modify_from_same_link_without_details
             * add_only_without_details
             * read_only_without_details
             * no_access

            For more details about each permission, visit the Settings -> Sharing section of your calendar.
          type: object
          example:
            '81234': modify
            '82345': add_only
          additionalProperties:
            type: string
            enum:
              - admin
              - modify
              - modify_from_same_link
              - add_only
              - read_only
              - modify_from_same_link_without_details
              - add_only_without_details
              - read_only_without_details
              - no_access
              - mixed
      type: object
    AccessKey.update:
      title: Update AccessKey
      description: When optional parameters are missing they will be replaced with the respective default values.
      required:
        - id
        - name
        - subcalendar_permissions
      properties:
        id:
          title: Unique key identifier.
          type: integer
        name:
          title: The name given to this key.
          description: The name is between 1 and 100 characters long and must be unique.
          type: string
          maxLength: 100
          minLength: 1
        role:
          title: Defines the permission the access key has on sub-calendars.
          description: |-
            If the attribute `share_type` is set to *all_subcalendars*, then this attribute defines the common permission
            the access key has for all sub-calendars.

            The following permission values are supported:
              * admin
              * modify
              * modify_from_same_link
              * add_only
              * read_only
              * modify_from_same_link_without_details
              * add_only_without_details
              * read_only_without_details
              * no_access

            For more details about each permission, visit the Settings -> Sharing section of your calendar
          type: string
          default: no_access
          enum:
            - admin
            - modify
            - modify_from_same_link
            - add_only
            - read_only
            - modify_from_same_link_without_details
            - add_only_without_details
            - read_only_without_details
            - no_access
            - mixed
        active:
          title: Whether the access key is active or not
          type: boolean
          default: true
        admin:
          title: Flag indicating if the key has administrator permission and therefore can manipulate the calendar settings.
          description: Flag that indicates if this key provides access to all resources or only selected resources.
          type: boolean
          default: false
        require_password:
          title: Indicates if a password is required when using this access key
          description: Flag that indicates if the link requires a password.
          type: boolean
          default: false
        password:
          title: The password to be used in addition to this access-key
          description: 'String representing a password hash. The password is hashed by {@see \PasswordChecker}.'
          type: string
          nullable: true
        share_type:
          title: Define whether the share-type is declared for all subcalendars or only for a specified subset.
          description: A value of `selected_subcalendars` requires the `subcalendar_permissions` to be available.
          type: string
          default: all_subcalendars
          enum:
            - all_subcalendars
            - selected_subcalendars
        subcalendar_permissions:
          title: An array of pairs of sub-calendar identifier and permission.
          description: |-
            If attribute `share_type` is set to ` selected_subcalendars`, then this attribute
            defines the individual permissions this access key has for each sub-calendars.
            The value of this attribute is an array of key/value pairs. The key is the
            id of a sub-calendar, the value is the permission this access key has for
            that sub-calendar. Please see Create Access Key for an example.

            The following permission values are supported:

             * admin
             * modify
             * modify_from_same_link
             * add_only
             * read_only
             * modify_from_same_link_without_details
             * add_only_without_details
             * read_only_without_details
             * no_access

            For more details about each permission, visit the Settings -> Sharing section of your calendar.
          type: object
          example:
            '81234': modify
            '82345': add_only
          additionalProperties:
            type: string
            enum:
              - admin
              - modify
              - modify_from_same_link
              - add_only
              - read_only
              - modify_from_same_link_without_details
              - add_only_without_details
              - read_only_without_details
              - no_access
              - mixed
      type: object
    AccessKey.create:
      title: Create AccessKey
      required:
        - name
        - subcalendar_permissions
      properties:
        name:
          title: The name given to this key.
          description: The name is between 1 and 100 characters long and must be unique.
          type: string
          maxLength: 100
          minLength: 1
        role:
          title: Defines the permission the access key has on sub-calendars.
          description: |-
            If the attribute `share_type` is set to *all_subcalendars*, then this attribute defines the common permission
            the access key has for all sub-calendars.

            The following permission values are supported:
              * admin
              * modify
              * modify_from_same_link
              * add_only
              * read_only
              * modify_from_same_link_without_details
              * add_only_without_details
              * read_only_without_details
              * no_access

            For more details about each permission, visit the Settings -> Sharing section of your calendar
          type: string
          default: no_access
          enum:
            - admin
            - modify
            - modify_from_same_link
            - add_only
            - read_only
            - modify_from_same_link_without_details
            - add_only_without_details
            - read_only_without_details
            - no_access
            - mixed
        active:
          title: Whether the access key is active or not
          type: boolean
          default: true
        admin:
          title: Flag indicating if the key has administrator permission and therefore can manipulate the calendar settings.
          description: Flag that indicates if this key provides access to all resources or only selected resources.
          type: boolean
          default: false
        require_password:
          title: Indicates if a password is required when using this access key
          description: Flag that indicates if the link requires a password.
          type: boolean
          default: false
        password:
          title: The password to be used in addition to this access-key
          description: 'String representing a password hash. The password is hashed by {@see \PasswordChecker}.'
          type: string
          nullable: true
        share_type:
          title: Define whether the share-type is declared for all subcalendars or only for a specified subset.
          description: A value of `selected_subcalendars` requires the `subcalendar_permissions` to be available.
          type: string
          default: all_subcalendars
          enum:
            - all_subcalendars
            - selected_subcalendars
        subcalendar_permissions:
          title: An array of pairs of sub-calendar identifier and permission.
          description: |-
            If attribute `share_type` is set to ` selected_subcalendars`, then this attribute
            defines the individual permissions this access key has for each sub-calendars.
            The value of this attribute is an array of key/value pairs. The key is the
            id of a sub-calendar, the value is the permission this access key has for
            that sub-calendar. Please see Create Access Key for an example.

            The following permission values are supported:

             * admin
             * modify
             * modify_from_same_link
             * add_only
             * read_only
             * modify_from_same_link_without_details
             * add_only_without_details
             * read_only_without_details
             * no_access

            For more details about each permission, visit the Settings -> Sharing section of your calendar.
          type: object
          example:
            '81234': modify
            '82345': add_only
          additionalProperties:
            type: string
            enum:
              - admin
              - modify
              - modify_from_same_link
              - add_only
              - read_only
              - modify_from_same_link_without_details
              - add_only_without_details
              - read_only_without_details
              - no_access
              - mixed
      type: object
    AccessKey.read:
      title: Read AccecssKey
      required:
        - id
        - creation_dt
        - subcalendar_permissions
      properties:
        id:
          title: Unique key identifier.
          type: integer
        key:
          title: The key string.
          description: |-
            The keyword 'key' is not allowed by MySQL for a table column name. Therefore, we use here akey (for application key).
            Up to 30 characters.
          type: string
          readOnly: true
          nullable: true
        name:
          title: The name given to this key.
          description: The name is between 1 and 100 characters long and must be unique.
          type: string
          maxLength: 100
          minLength: 1
          nullable: true
        role:
          title: Defines the permission the access key has on sub-calendars.
          description: |-
            If the attribute `share_type` is set to *all_subcalendars*, then this attribute defines the common permission
            the access key has for all sub-calendars.

            The following permission values are supported:
              * admin
              * modify
              * modify_from_same_link
              * add_only
              * read_only
              * modify_from_same_link_without_details
              * add_only_without_details
              * read_only_without_details
              * no_access

            For more details about each permission, visit the Settings -> Sharing section of your calendar
          type: string
          default: no_access
          enum:
            - admin
            - modify
            - modify_from_same_link
            - add_only
            - read_only
            - modify_from_same_link_without_details
            - add_only_without_details
            - read_only_without_details
            - no_access
            - mixed
        active:
          title: Whether the access key is active or not
          type: boolean
          default: true
        admin:
          title: Flag indicating if the key has administrator permission and therefore can manipulate the calendar settings.
          description: Flag that indicates if this key provides access to all resources or only selected resources.
          type: boolean
          default: false
        require_password:
          title: Indicates if a password is required when using this access key
          description: Flag that indicates if the link requires a password.
          type: boolean
          default: false
        user_id:
          title: A user-ID associated with this access key
          type: integer
          nullable: true
        user_email:
          title: |-
            The user's email associated with this key. It should be null if $user_id = null
            This field is not stored in the database. It is used to transport user email value across the DB API.
          type: string
          nullable: true
        creation_dt:
          title: Creation date
          description: Date and time when key was created.
          type: string
          format: date-time
          readOnly: true
        update_dt:
          title: Last update date
          description: Date and time when key was updated.
          type: string
          format: date-time
          readOnly: true
          nullable: true
        has_password:
          title: Indicates if a password has been set for this access key.
          type: boolean
          default: false
        share_type:
          title: Define whether the share-type is declared for all subcalendars or only for a specified subset.
          description: A value of `selected_subcalendars` requires the `subcalendar_permissions` to be available.
          type: string
          default: all_subcalendars
          enum:
            - all_subcalendars
            - selected_subcalendars
        subcalendar_permissions:
          title: An array of pairs of sub-calendar identifier and permission.
          description: |-
            If attribute `share_type` is set to ` selected_subcalendars`, then this attribute
            defines the individual permissions this access key has for each sub-calendars.
            The value of this attribute is an array of key/value pairs. The key is the
            id of a sub-calendar, the value is the permission this access key has for
            that sub-calendar. Please see Create Access Key for an example.

            The following permission values are supported:

             * admin
             * modify
             * modify_from_same_link
             * add_only
             * read_only
             * modify_from_same_link_without_details
             * add_only_without_details
             * read_only_without_details
             * no_access

            For more details about each permission, visit the Settings -> Sharing section of your calendar.
          type: object
          example:
            '81234': modify
            '82345': add_only
          additionalProperties:
            type: string
            enum:
              - admin
              - modify
              - modify_from_same_link
              - add_only
              - read_only
              - modify_from_same_link_without_details
              - add_only_without_details
              - read_only_without_details
              - no_access
              - mixed
        email:
          title: When a user is associated with this Acces Key then this contains their email-address.
          type: string
          nullable: true
      type: object
    Attachment.delete:
      title: Delete Attachment
      required:
        - id
        - deleted
      properties:
        id:
          title: The ULID identifying the attachment
          type: string
        deleted:
          title: Whether to delete the file or not.
          type: boolean
      type: object
    Attachment.create:
      title: Create Attachment
      required:
        - name
        - size
        - mimetype
        - path
      properties:
        name:
          title: The name of the file
          description: This filename includes any document-type endings like `.pdf` or `.jpeg`.
          type: string
        size:
          title: The size of the file in bytes
          type: integer
        mimetype:
          title: The MIME-Type of the file
          type: string
        path:
          title: The path to the file within the temporary upload-folder.
          description: |-
            The path-separator within this string *must not* be URL-encoded.
            It is absolutely vital, that this path is sent as a real path like
            `temp/file.jpeg` and not `temp%2Ffile.jpeg`!

            Files are *always* stored within the `temp`-folder so this path *has*
            to start with `temp/`. Otherwise, requests will result in an error-condition.
          type: string
          example: temp/file.jpeg
      type: object
    Attachment.read:
      title: Read Attachment
      required:
        - id
        - name
        - size
        - mimetype
        - upload_date
        - thumbnail
        - link
        - preview
      properties:
        id:
          title: The ULID identifying the attachment
          type: string
        name:
          title: The name of the file
          description: This filename includes any document-type endings like `.pdf` or `.jpeg`.
          type: string
        size:
          title: The size of the file in bytes
          type: integer
        mimetype:
          title: The MIME-Type of the file
          type: string
        upload_date:
          type: string
          format: date-time
        thumbnail:
          type: string
          example: 'https://example.com/{keyId}/attachments/{attachmentId}}/thumbnail/file.jpg?hash={hash}'
        link:
          type: string
          example: 'https://example.com/{keyId}/attachments/{attachmentId}}/file.jpg?hash={hash}'
        preview:
          title: The path to a reduced size preview-file for this attachment.
          type: string
          example: 'https://example.com/{keyId}/attachments/{attachmentId}}/preview/file.jpg?hash={hash}&size={size}'
      type: object
    User.update:
      title: Update Me
      description: Possible parameters to update the current user
      required:
        - language
      properties:
        language:
          type: string
      type: object
    User.read_self:
      title: Read Me
      description: Information about the current user
      required:
        - id
        - email
        - name
        - avatar_url
        - language
        - is_sso
      properties:
        id:
          type: integer
        email:
          type: string
        roles:
          type: array
          items:
            type: string
          default: []
        name:
          title: 'Display name of the user, not unique.'
          type: string
        avatar_type:
          type: string
          enum:
            - gravatar
            - uploaded_image
            - initial
          nullable: true
        two_fa_active:
          type: boolean
          default: false
        avatar_url:
          type: string
        language:
          type: string
        is_sso:
          type: boolean
      type: object
    User.read:
      title: Read User
      description: Information about a user
      required:
        - email
        - name
        - avatar_url
        - language
        - is_sso
      properties:
        email:
          type: string
        name:
          title: 'Display name of the user, not unique.'
          type: string
        avatar_type:
          type: string
          enum:
            - gravatar
            - uploaded_image
            - initial
          nullable: true
        avatar_url:
          type: string
        language:
          type: string
        is_sso:
          type: boolean
      type: object
    EventReminder:
      title: Event reminder subscription
      description: Notifications / emails being sent before an event occurs
      required:
        - transport
        - offset
        - all_day
        - tz
      properties:
        id:
          type: integer
          readOnly: true
          example: 18290
          nullable: true
        transport:
          title: What medium to send the reminder over.
          type: string
        offset:
          title: 'Reminder offset: An ISO-8601 duration string specifying how far before the event the reminder should be.'
          type: string
          example: PT10M
        all_day:
          title: Whether this subscription applies to all-day events (true) or non-all-day events (false).
          type: boolean
        time_of_day:
          title: Time of day
          description: 'For all-day events only, a time (RFC3339 / 24h format) for when the reminder should be.'
          type: string
          example: '10:00:00'
          nullable: true
        tz:
          title: Timezone for time_of_day
          description: The time zone identifier that applies to the time of day and is used in the reminder emails.
          type: string
          example: America/New_York
      type: object
    EventSignup:
      title: Event signup
      description: Event signup model
      required:
        - id
        - event_id
        - creation_dt
        - email_hash
      properties:
        id:
          type: integer
          readOnly: true
          example: 4930
        event_id:
          type: integer
          example: 53809
        name:
          title: Signup name.
          description: 'Optional, but either email or name must be set.'
          type: string
          default: ''
          example: Mark
        email:
          title: Signup email.
          description: 'Optional, but either email or name must be set.'
          type: string
          format: emailorblank
          default: null
          example: mark@example.org
          nullable: true
        remote_id:
          title: 'Unique (per event id) remote identifier, can be used to link Teamup signups to signups in third-party applications.'
          type: string
          nullable: true
        creation_dt:
          title: Date and time when record has been created.
          type: string
          format: date-time
          readOnly: true
        update_dt:
          title: Date and time when record has last been updated.
          type: string
          format: date-time
          readOnly: true
          nullable: true
        email_hash:
          title: |-
            MD5 hash of the email address. If no email address is available, this is the md5 hash of the user
            name. This hash can be used to request the Gravatar avatar. See http://en.gravatar.com/site/implement/images/
          description: This is a calculated field.
          type: string
          readOnly: true
          example: eb88aebd18089396d068a498a66dd7fe
      type: object
    EventComment:
      title: Event comment
      description: Event comment model
      required:
        - id
        - event_id
        - message
        - creation_dt
      properties:
        id:
          type: integer
          readOnly: true
          example: 35081
        event_id:
          type: string
          example: 53809 or 53809-rid-1728574025
        name:
          title: Commenter name.
          description: 'Optional, but either email or name must be set.'
          type: string
          default: ''
          example: Peter
        email:
          title: Commenter email.
          description: 'Optional, but either email or name must be set.'
          type: string
          format: emailorblank
          default: null
          example: peter@example.org
          nullable: true
        message:
          $ref: '#/components/schemas/comment_message'
        remote_id:
          title: 'Unique (per event id) remote identifier, can be used to link Teamup comments to comments in third-party applications.'
          type: string
          nullable: true
        creation_dt:
          title: Date and time when record has been created.
          type: string
          format: date-time
          readOnly: true
        update_dt:
          title: Date and time when record has last been updated.
          type: string
          format: date-time
          readOnly: true
          nullable: true
        updater:
          title: Name of the last user/link that updated the comment.
          description: This is a calculated field
          type: string
          readOnly: true
          example: Peter
          nullable: true
      type: object
    Event.modified_since:
      title: Events Modified Since
      description: Content of an event when fetching modified events
      required:
        - id
        - start_dt
        - end_dt
        - creation_dt
        - attachments
        - readonly
        - signup_enabled
        - comments_enabled
      properties:
        id:
          title: Unique event identifier.
          description: |-
            The event-identifier is an integer for a non-recurring event. For
            recurring events we will return the individual instances according to
            the recurrence rule and possibly existing exceptions. The individual
            instances will have an identifier that consists of the event-ID followed
            by '-rid-' and the unix-timestamp of the start-time of the individual
            event.

            So an instance of the recurring event 123 starting on Thu Apr 04 15:43:58
            2024 UTC would have the ID 123-rid-1712245438
          type: string
          readOnly: true
        subcalendar_ids:
          title: A list of ids of sub-calendars to which the event is assigned.
          description: |-
            The actual IDs can be retrieved via the `/{calendarKey}/configuration`
            endpoint. See the "configuration => subcalendars" information.
          type: array
          items:
            type: integer
          default: []
        subcalendar_remote_ids:
          title: A list of remote ids of sub-calendars to which the event is assigned.
          type: array
          items:
            type: string
          default: []
          nullable: true
        start_dt:
          $ref: '#/components/schemas/datetime_or_timestamp'
        end_dt:
          $ref: '#/components/schemas/datetime_or_timestamp'
        all_day:
          title: Whether the event spans all day or is an hourly event.
          description: |-
            Set to `true` for an all-day event, set to `false` for an event with
            a time
          type: boolean
          default: false
        rrule:
          title: Recurrence rule (for recurring events only)
          description: 'In iCal RRULE format, see: https://www.kanzaki.com/docs/ical/rrule.html'
          type: string
          default: ''
        duration:
          title: Duration of event in minutes (for recurring events only)
          description: |-
            When using recurrence, the standard end_dt value will be the end date
            of the _recurrence series_, not the end date of the "event".
            Because of this, we also store the duration of the event when using
            recurrence so that the end date of each event instance can be properly
            calculated.
          type: integer
          readOnly: true
          nullable: true
        creation_dt:
          $ref: '#/components/schemas/date_time_or_timestamp'
        update_dt:
          oneOf:
            - $ref: '#/components/schemas/date_time_or_timestamp'
          nullable: true
          title: Date and time when event was updated.
        delete_dt:
          title: Date and time when event was deleted.
          description: This field is only set if the event has been deleted.
          type: string
          format: date-time
          readOnly: true
          nullable: true
        tz:
          title: Timezone for which the recurrence rule is evaluated (recurring events only).
          description: |-
            Defaults to the timezone of the client when event was created or last
            updated. This is a timezone identifier of the Olsen database, e.g.
            "America/New_York".
          type: string
          nullable: true
        version:
          title: Unique identifier for the event version. Used to detect concurrent editing of event records.
          type: string
          nullable: true
        remote_id:
          title: 'Unique (per calendar) remote identifier, can be used to link Teamup events to events in third-party applications.'
          type: string
          nullable: true
        series_id:
          title: Id of recurring event series to which this event belongs (recurring events only)
          description: Id of the primary event that serves as the template/original for a recurring event series.
          type: integer
          readOnly: true
          nullable: true
        ristart_dt:
          oneOf:
            - $ref: '#/components/schemas/date_time_or_timestamp'
          nullable: true
          title: The recurrence instance start date (recurring events only).
          description: |-
            In cases where editing an event would require an exception date to be stored,
            the event instance's original start date must be used. Since the start date
            could be edited (and would not match as an exception in that case) the original
            start date is preserved prior to editing and sent with each request.
            This is transient data and is not be persisted (it's ignored by the calendar
            for display purposes).

            ristart is always specified in UTC, not local time. This is important for the
            following reason:
            For all-day events, the client receives and sends start and end times in UTC, for hourly events
            the client receives and sends start and end times in local time. When a recurrent event is moved
            and the change is applied to all or future events, then the server needs to calculate how much
            the event was moved and apply the move to all instances of the recurring series. If an allday
            event is turned into an hourly event or vice versa, this requires also a move of the event
            because times are specified in different time zones for the two cases. In order to calculate how
            far an event must be moved, it is necessary that ristart is always specified in UTC.
        rsstart_dt:
          oneOf:
            - $ref: '#/components/schemas/datetime_or_timestamp'
          nullable: true
          title: The start date of the recurring series of events to which this event instance belongs (recurring events only).
          readOnly: true
        attachments:
          title: 'Store the list of attachments for current event. This is a calculated field, not a field stored in the database'
          type: array
          items:
            $ref: '#/components/schemas/Attachment.read'
        title:
          title: Event title.
          type: string
          nullable: true
        location:
          title: Event location ("where" field).
          type: string
          nullable: true
        who:
          title: Event "Who" field.
          type: string
          nullable: true
        readonly:
          title: Events are readonly unless the user has modify or admin access on all of the event's subcalendars.
          type: boolean
          readOnly: true
        signup_enabled:
          type: boolean
        signup_deadline:
          title: When is the last time someone can sign up for an event.
          description: |-
            If now deadline has been set, then event start time is taken as the
            default signup deadline.
          type: string
          format: date-time
          nullable: true
        signup_visibility:
          title: This is a required field when signups are enabled.
          type: string
          enum:
            - all_users
            - users_with_modify_permission
          nullable: true
        signup_limit:
          title: 'The maximum number of signups, if any, or 0 if there is no limit.'
          description: This is a required field when signups are enabled
          type: integer
          minimum: 0
          nullable: true
        comments_enabled:
          type: boolean
        comments_visibility:
          title: 'When comments are enabled, this is a required field'
          type: string
          enum:
            - all_users
            - users_with_modify_permission
          nullable: true
        custom:
          title: Custom field values for user-defined custom event fields.
          description: This is an object with custom field ids as keys and values as strings or arrays of strings for fields of type "choice".
          type: object
          example:
            field1: value
            choicefield:
              - a
              - b
          nullable: true
          additionalProperties: true
        comments:
          title: Comments
          description: Only set when comments are enabled on the event.
          type: array
          items:
            $ref: '#/components/schemas/EventComment'
          nullable: true
        signups:
          title: Signups
          description: Only set when signups are enabled on the event.
          type: array
          items:
            $ref: '#/components/schemas/EventSignup'
          nullable: true
      type: object
    Event.write_response:
      title: Response to Create or Update Event
      description: Content of an event in the response to creating or modifying an event
      required:
        - id
        - start_dt
        - end_dt
        - creation_dt
        - attachments
        - readonly
        - signup_enabled
        - comments_enabled
      properties:
        id:
          title: Unique event identifier.
          description: |-
            The event-identifier is an integer for a non-recurring event. For
            recurring events we will return the individual instances according to
            the recurrence rule and possibly existing exceptions. The individual
            instances will have an identifier that consists of the event-ID followed
            by '-rid-' and the unix-timestamp of the start-time of the individual
            event.

            So an instance of the recurring event 123 starting on Thu Apr 04 15:43:58
            2024 UTC would have the ID 123-rid-1712245438
          type: string
          readOnly: true
        subcalendar_ids:
          title: A list of ids of sub-calendars to which the event is assigned.
          description: |-
            The actual IDs can be retrieved via the `/{calendarKey}/configuration`
            endpoint. See the "configuration => subcalendars" information.
          type: array
          items:
            type: integer
          default: []
        subcalendar_remote_ids:
          title: A list of remote ids of sub-calendars to which the event is assigned.
          type: array
          items:
            type: string
          default: []
          nullable: true
        start_dt:
          $ref: '#/components/schemas/datetime_or_timestamp'
        end_dt:
          $ref: '#/components/schemas/datetime_or_timestamp'
        all_day:
          title: Whether the event spans all day or is an hourly event.
          description: |-
            Set to `true` for an all-day event, set to `false` for an event with
            a time
          type: boolean
          default: false
        rrule:
          title: Recurrence rule (for recurring events only)
          description: 'In iCal RRULE format, see: https://www.kanzaki.com/docs/ical/rrule.html'
          type: string
          default: ''
        creation_dt:
          $ref: '#/components/schemas/date_time_or_timestamp'
        update_dt:
          oneOf:
            - $ref: '#/components/schemas/date_time_or_timestamp'
          nullable: true
          title: Date and time when event was updated.
        delete_dt:
          title: Date and time when event was deleted.
          description: This field is only set if the event has been deleted.
          type: string
          format: date-time
          readOnly: true
          nullable: true
        tz:
          title: Timezone for which the recurrence rule is evaluated (recurring events only).
          description: |-
            Defaults to the timezone of the client when event was created or last
            updated. This is a timezone identifier of the Olsen database, e.g.
            "America/New_York".
          type: string
          nullable: true
        version:
          title: Unique identifier for the event version. Used to detect concurrent editing of event records.
          type: string
          nullable: true
        remote_id:
          title: 'Unique (per calendar) remote identifier, can be used to link Teamup events to events in third-party applications.'
          type: string
          nullable: true
        series_id:
          title: Id of recurring event series to which this event belongs (recurring events only)
          description: Id of the primary event that serves as the template/original for a recurring event series.
          type: integer
          readOnly: true
          nullable: true
        ristart_dt:
          oneOf:
            - $ref: '#/components/schemas/date_time_or_timestamp'
          nullable: true
          title: The recurrence instance start date (recurring events only).
          description: |-
            In cases where editing an event would require an exception date to be stored,
            the event instance's original start date must be used. Since the start date
            could be edited (and would not match as an exception in that case) the original
            start date is preserved prior to editing and sent with each request.
            This is transient data and is not be persisted (it's ignored by the calendar
            for display purposes).

            ristart is always specified in UTC, not local time. This is important for the
            following reason:
            For all-day events, the client receives and sends start and end times in UTC, for hourly events
            the client receives and sends start and end times in local time. When a recurrent event is moved
            and the change is applied to all or future events, then the server needs to calculate how much
            the event was moved and apply the move to all instances of the recurring series. If an allday
            event is turned into an hourly event or vice versa, this requires also a move of the event
            because times are specified in different time zones for the two cases. In order to calculate how
            far an event must be moved, it is necessary that ristart is always specified in UTC.
        rsstart_dt:
          oneOf:
            - $ref: '#/components/schemas/datetime_or_timestamp'
          nullable: true
          title: The start date of the recurring series of events to which this event instance belongs (recurring events only).
          readOnly: true
        attachments:
          title: 'Store the list of attachments for current event. This is a calculated field, not a field stored in the database'
          type: array
          items:
            $ref: '#/components/schemas/Attachment.read'
        title:
          title: Event title.
          type: string
          nullable: true
        location:
          title: Event location ("where" field).
          type: string
          nullable: true
        who:
          title: Event "Who" field.
          type: string
          nullable: true
        readonly:
          title: Events are readonly unless the user has modify or admin access on all of the event's subcalendars.
          type: boolean
          readOnly: true
        signup_enabled:
          type: boolean
        signup_deadline:
          title: When is the last time someone can sign up for an event.
          description: |-
            If now deadline has been set, then event start time is taken as the
            default signup deadline.
          type: string
          format: date-time
          nullable: true
        signup_visibility:
          title: This is a required field when signups are enabled.
          type: string
          enum:
            - all_users
            - users_with_modify_permission
          nullable: true
        signup_limit:
          title: 'The maximum number of signups, if any, or 0 if there is no limit.'
          description: This is a required field when signups are enabled
          type: integer
          minimum: 0
          nullable: true
        comments_enabled:
          type: boolean
        comments_visibility:
          title: 'When comments are enabled, this is a required field'
          type: string
          enum:
            - all_users
            - users_with_modify_permission
          nullable: true
        custom:
          title: Custom field values for user-defined custom event fields.
          description: This is an object with custom field ids as keys and values as strings or arrays of strings for fields of type "choice".
          type: object
          example:
            field1: value
            choicefield:
              - a
              - b
          nullable: true
          additionalProperties: true
        comments:
          title: Comments
          description: Only set when comments are enabled on the event.
          type: array
          items:
            $ref: '#/components/schemas/EventComment'
          nullable: true
        signups:
          title: Signups
          description: Only set when signups are enabled on the event.
          type: array
          items:
            $ref: '#/components/schemas/EventSignup'
          nullable: true
      type: object
    Event.read:
      title: Read Event
      description: Content of an event when fetching a single event
      required:
        - id
        - start_dt
        - end_dt
        - creation_dt
        - attachments
        - readonly
        - signup_enabled
        - comments_enabled
      properties:
        id:
          title: Unique event identifier.
          description: |-
            The event-identifier is an integer for a non-recurring event. For
            recurring events we will return the individual instances according to
            the recurrence rule and possibly existing exceptions. The individual
            instances will have an identifier that consists of the event-ID followed
            by '-rid-' and the unix-timestamp of the start-time of the individual
            event.

            So an instance of the recurring event 123 starting on Thu Apr 04 15:43:58
            2024 UTC would have the ID 123-rid-1712245438
          type: string
          readOnly: true
        subcalendar_ids:
          title: A list of ids of sub-calendars to which the event is assigned.
          description: |-
            The actual IDs can be retrieved via the `/{calendarKey}/configuration`
            endpoint. See the "configuration => subcalendars" information.
          type: array
          items:
            type: integer
          default: []
        subcalendar_remote_ids:
          title: A list of remote ids of sub-calendars to which the event is assigned.
          type: array
          items:
            type: string
          default: []
          nullable: true
        start_dt:
          $ref: '#/components/schemas/datetime_or_timestamp'
        end_dt:
          $ref: '#/components/schemas/datetime_or_timestamp'
        all_day:
          title: Whether the event spans all day or is an hourly event.
          description: |-
            Set to `true` for an all-day event, set to `false` for an event with
            a time
          type: boolean
          default: false
        rrule:
          title: Recurrence rule (for recurring events only)
          description: 'In iCal RRULE format, see: https://www.kanzaki.com/docs/ical/rrule.html'
          type: string
          default: ''
        creation_dt:
          $ref: '#/components/schemas/date_time_or_timestamp'
        update_dt:
          oneOf:
            - $ref: '#/components/schemas/date_time_or_timestamp'
          nullable: true
          title: Date and time when event was updated.
        delete_dt:
          title: Date and time when event was deleted.
          description: This field is only set if the event has been deleted.
          type: string
          format: date-time
          readOnly: true
          nullable: true
        tz:
          title: Timezone for which the recurrence rule is evaluated (recurring events only).
          description: |-
            Defaults to the timezone of the client when event was created or last
            updated. This is a timezone identifier of the Olsen database, e.g.
            "America/New_York".
          type: string
          nullable: true
        version:
          title: Unique identifier for the event version. Used to detect concurrent editing of event records.
          type: string
          nullable: true
        remote_id:
          title: 'Unique (per calendar) remote identifier, can be used to link Teamup events to events in third-party applications.'
          type: string
          nullable: true
        series_id:
          title: Id of recurring event series to which this event belongs (recurring events only)
          description: Id of the primary event that serves as the template/original for a recurring event series.
          type: integer
          readOnly: true
          nullable: true
        ristart_dt:
          oneOf:
            - $ref: '#/components/schemas/date_time_or_timestamp'
          nullable: true
          title: The recurrence instance start date (recurring events only).
          description: |-
            In cases where editing an event would require an exception date to be stored,
            the event instance's original start date must be used. Since the start date
            could be edited (and would not match as an exception in that case) the original
            start date is preserved prior to editing and sent with each request.
            This is transient data and is not be persisted (it's ignored by the calendar
            for display purposes).

            ristart is always specified in UTC, not local time. This is important for the
            following reason:
            For all-day events, the client receives and sends start and end times in UTC, for hourly events
            the client receives and sends start and end times in local time. When a recurrent event is moved
            and the change is applied to all or future events, then the server needs to calculate how much
            the event was moved and apply the move to all instances of the recurring series. If an allday
            event is turned into an hourly event or vice versa, this requires also a move of the event
            because times are specified in different time zones for the two cases. In order to calculate how
            far an event must be moved, it is necessary that ristart is always specified in UTC.
        rsstart_dt:
          oneOf:
            - $ref: '#/components/schemas/datetime_or_timestamp'
          nullable: true
          title: The start date of the recurring series of events to which this event instance belongs (recurring events only).
          readOnly: true
        attachments:
          title: 'Store the list of attachments for current event. This is a calculated field, not a field stored in the database'
          type: array
          items:
            $ref: '#/components/schemas/Attachment.read'
        title:
          title: Event title.
          type: string
          nullable: true
        location:
          title: Event location ("where" field).
          type: string
          nullable: true
        who:
          title: Event "Who" field.
          type: string
          nullable: true
        readonly:
          title: Events are readonly unless the user has modify or admin access on all of the event's subcalendars.
          type: boolean
          readOnly: true
        signup_enabled:
          type: boolean
        signup_deadline:
          title: When is the last time someone can sign up for an event.
          description: |-
            If now deadline has been set, then event start time is taken as the
            default signup deadline.
          type: string
          format: date-time
          nullable: true
        signup_visibility:
          title: This is a required field when signups are enabled.
          type: string
          enum:
            - all_users
            - users_with_modify_permission
          nullable: true
        signup_limit:
          title: 'The maximum number of signups, if any, or 0 if there is no limit.'
          description: This is a required field when signups are enabled
          type: integer
          minimum: 0
          nullable: true
        comments_enabled:
          type: boolean
        comments_visibility:
          title: 'When comments are enabled, this is a required field'
          type: string
          enum:
            - all_users
            - users_with_modify_permission
          nullable: true
        custom:
          title: Custom field values for user-defined custom event fields.
          description: This is an object with custom field ids as keys and values as strings or arrays of strings for fields of type "choice".
          type: object
          example:
            field1: value
            choicefield:
              - a
              - b
          nullable: true
          additionalProperties: true
        comments:
          title: Comments
          description: Only set when comments are enabled on the event.
          type: array
          items:
            $ref: '#/components/schemas/EventComment'
          nullable: true
        signups:
          title: Signups
          description: Only set when signups are enabled on the event.
          type: array
          items:
            $ref: '#/components/schemas/EventSignup'
          nullable: true
      type: object
    Event.delete:
      title: Delete Event
      description: All parameters for deleting an event
      required:
        - id
      properties:
        id:
          title: Unique event identifier.
          description: |-
            The event-identifier is an integer for a non-recurring event. For
            recurring events we will return the individual instances according to
            the recurrence rule and possibly existing exceptions. The individual
            instances will have an identifier that consists of the event-ID followed
            by '-rid-' and the unix-timestamp of the start-time of the individual
            event.

            So an instance of the recurring event 123 starting on Thu Apr 04 15:43:58
            2024 UTC would have the ID 123-rid-1712245438
          type: string
          readOnly: true
        version:
          title: Unique identifier for the event version. Used to detect concurrent editing of event records.
          type: string
          nullable: true
        redit:
          title: |-
            Recurrence edit mode ('single', 'future' or 'all'). This is transient data
            and is not be persisted (it's ignored by the calendar for display purposes),
            but it's kept on the record for ease of transmission to the server, and because
            multiple batched events could have different edit modes.
          type: string
          enum:
            - all
            - single
            - future
          writeOnly: true
          nullable: true
        ristart_dt:
          oneOf:
            - $ref: '#/components/schemas/date_time_or_timestamp'
          nullable: true
          title: The recurrence instance start date (recurring events only).
          description: |-
            In cases where editing an event would require an exception date to be stored,
            the event instance's original start date must be used. Since the start date
            could be edited (and would not match as an exception in that case) the original
            start date is preserved prior to editing and sent with each request.
            This is transient data and is not be persisted (it's ignored by the calendar
            for display purposes).

            ristart is always specified in UTC, not local time. This is important for the
            following reason:
            For all-day events, the client receives and sends start and end times in UTC, for hourly events
            the client receives and sends start and end times in local time. When a recurrent event is moved
            and the change is applied to all or future events, then the server needs to calculate how much
            the event was moved and apply the move to all instances of the recurring series. If an allday
            event is turned into an hourly event or vice versa, this requires also a move of the event
            because times are specified in different time zones for the two cases. In order to calculate how
            far an event must be moved, it is necessary that ristart is always specified in UTC.
      type: object
    Event.update:
      title: Update Event
      description: All parameters for updating an event
      required:
        - id
        - start_dt
        - end_dt
        - signup_enabled
        - comments_enabled
        - attachments
      properties:
        id:
          title: Unique event identifier.
          description: |-
            The event-identifier is an integer for a non-recurring event. For
            recurring events we will return the individual instances according to
            the recurrence rule and possibly existing exceptions. The individual
            instances will have an identifier that consists of the event-ID followed
            by '-rid-' and the unix-timestamp of the start-time of the individual
            event.

            So an instance of the recurring event 123 starting on Thu Apr 04 15:43:58
            2024 UTC would have the ID 123-rid-1712245438
          type: string
          readOnly: true
        subcalendar_ids:
          title: A list of ids of sub-calendars to which the event is assigned.
          description: |-
            The actual IDs can be retrieved via the `/{calendarKey}/configuration`
            endpoint. See the "configuration => subcalendars" information.
          type: array
          items:
            type: integer
          default: []
        subcalendar_remote_ids:
          title: A list of remote ids of sub-calendars to which the event is assigned.
          type: array
          items:
            type: string
          default: []
          nullable: true
        start_dt:
          $ref: '#/components/schemas/datetime_or_timestamp'
        end_dt:
          $ref: '#/components/schemas/datetime_or_timestamp'
        all_day:
          title: Whether the event spans all day or is an hourly event.
          description: |-
            Set to `true` for an all-day event, set to `false` for an event with
            a time
          type: boolean
          default: false
        rrule:
          title: Recurrence rule (for recurring events only)
          description: 'In iCal RRULE format, see: https://www.kanzaki.com/docs/ical/rrule.html'
          type: string
          default: ''
        notes:
          title: A description of the event.
          description: |-
            This can either be markdown or HTML. The format has to be defined via the
            `inputFormat` query parameter.

            When this contains links to new attachments those links need to end with
            exactly the same value that is used for the attachments `path` parameter. Best is, when
            it actually is the attachments `link` parameter.
          type: string
          default: ''
        version:
          title: Unique identifier for the event version. Used to detect concurrent editing of event records.
          type: string
          nullable: true
        remote_id:
          title: 'Unique (per calendar) remote identifier, can be used to link Teamup events to events in third-party applications.'
          type: string
          nullable: true
        redit:
          title: |-
            Recurrence edit mode ('single', 'future' or 'all'). This is transient data
            and is not be persisted (it's ignored by the calendar for display purposes),
            but it's kept on the record for ease of transmission to the server, and because
            multiple batched events could have different edit modes.
          type: string
          enum:
            - all
            - single
            - future
          writeOnly: true
          nullable: true
        ristart_dt:
          oneOf:
            - $ref: '#/components/schemas/date_time_or_timestamp'
          nullable: true
          title: The recurrence instance start date (recurring events only).
          description: |-
            In cases where editing an event would require an exception date to be stored,
            the event instance's original start date must be used. Since the start date
            could be edited (and would not match as an exception in that case) the original
            start date is preserved prior to editing and sent with each request.
            This is transient data and is not be persisted (it's ignored by the calendar
            for display purposes).

            ristart is always specified in UTC, not local time. This is important for the
            following reason:
            For all-day events, the client receives and sends start and end times in UTC, for hourly events
            the client receives and sends start and end times in local time. When a recurrent event is moved
            and the change is applied to all or future events, then the server needs to calculate how much
            the event was moved and apply the move to all instances of the recurring series. If an allday
            event is turned into an hourly event or vice versa, this requires also a move of the event
            because times are specified in different time zones for the two cases. In order to calculate how
            far an event must be moved, it is necessary that ristart is always specified in UTC.
        title:
          title: Event title.
          type: string
          nullable: true
        location:
          title: Event location ("where" field).
          type: string
          nullable: true
        who:
          title: Event "Who" field.
          type: string
          nullable: true
        signup_enabled:
          type: boolean
        signup_deadline:
          title: When is the last time someone can sign up for an event.
          description: |-
            If now deadline has been set, then event start time is taken as the
            default signup deadline.
          type: string
          format: date-time
          nullable: true
        signup_visibility:
          title: This is a required field when signups are enabled.
          type: string
          enum:
            - all_users
            - users_with_modify_permission
          nullable: true
        signup_limit:
          title: 'The maximum number of signups, if any, or 0 if there is no limit.'
          description: This is a required field when signups are enabled
          type: integer
          minimum: 0
          nullable: true
        comments_enabled:
          type: boolean
        comments_visibility:
          title: 'When comments are enabled, this is a required field'
          type: string
          enum:
            - all_users
            - users_with_modify_permission
          nullable: true
        custom:
          title: Custom field values for user-defined custom event fields.
          description: This is an object with custom field ids as keys and values as strings or arrays of strings for fields of type "choice".
          type: object
          example:
            field1: value
            choicefield:
              - a
              - b
          nullable: true
          additionalProperties: true
        attachments:
          title: Attachments
          description: A list of Attachments for this event.
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Attachment.delete'
              - $ref: '#/components/schemas/Attachment.create'
      type: object
    Event.createRecurring:
      title: Create recurring Event
      description: All parameters for creating a new recurring event
      required:
        - start_dt
        - end_dt
        - signup_enabled
        - comments_enabled
        - attachments
      properties:
        subcalendar_ids:
          title: A list of ids of sub-calendars to which the event is assigned.
          description: |-
            The actual IDs can be retrieved via the `/{calendarKey}/configuration`
            endpoint. See the "configuration => subcalendars" information.
          type: array
          items:
            type: integer
          default: []
        subcalendar_remote_ids:
          title: A list of remote ids of sub-calendars to which the event is assigned.
          type: array
          items:
            type: string
          default: []
          nullable: true
        start_dt:
          $ref: '#/components/schemas/datetime_or_timestamp'
        end_dt:
          $ref: '#/components/schemas/datetime_or_timestamp'
        all_day:
          title: Whether the event spans all day or is an hourly event.
          description: |-
            Set to `true` for an all-day event, set to `false` for an event with
            a time
          type: boolean
          default: false
        rrule:
          title: Recurrence rule (for recurring events only)
          description: 'In iCal RRULE format, see: https://www.kanzaki.com/docs/ical/rrule.html'
          type: string
          default: ''
        notes:
          title: A description of the event.
          description: |-
            This can either be markdown or HTML. The format has to be defined via the
            `inputFormat` query parameter.

            When this contains links to new attachments those links need to end with
            exactly the same value that is used for the attachments `path` parameter. Best is, when
            it actually is the attachments `link` parameter.
          type: string
          default: ''
        remote_id:
          title: 'Unique (per calendar) remote identifier, can be used to link Teamup events to events in third-party applications.'
          type: string
          nullable: true
        title:
          title: Event title.
          type: string
          nullable: true
        location:
          title: Event location ("where" field).
          type: string
          nullable: true
        who:
          title: Event "Who" field.
          type: string
          nullable: true
        signup_enabled:
          type: boolean
        signup_deadline:
          title: When is the last time someone can sign up for an event.
          description: |-
            If now deadline has been set, then event start time is taken as the
            default signup deadline.
          type: string
          format: date-time
          nullable: true
        signup_visibility:
          title: This is a required field when signups are enabled.
          type: string
          enum:
            - all_users
            - users_with_modify_permission
          nullable: true
        signup_limit:
          title: 'The maximum number of signups, if any, or 0 if there is no limit.'
          description: This is a required field when signups are enabled
          type: integer
          minimum: 0
          nullable: true
        comments_enabled:
          type: boolean
        comments_visibility:
          title: 'When comments are enabled, this is a required field'
          type: string
          enum:
            - all_users
            - users_with_modify_permission
          nullable: true
        custom:
          title: Custom field values for user-defined custom event fields.
          description: This is an object with custom field ids as keys and values as strings or arrays of strings for fields of type "choice".
          type: object
          example:
            field1: value
            choicefield:
              - a
              - b
          nullable: true
          additionalProperties: true
        attachments:
          title: Attachments
          description: A list of Attachments for this event.
          type: array
          items:
            $ref: '#/components/schemas/Attachment.create'
      type: object
    Event.create:
      title: Create Event
      description: All parameters for creating a new event
      required:
        - start_dt
        - end_dt
        - signup_enabled
        - comments_enabled
        - attachments
      properties:
        subcalendar_ids:
          title: A list of ids of sub-calendars to which the event is assigned.
          description: |-
            The actual IDs can be retrieved via the `/{calendarKey}/configuration`
            endpoint. See the "configuration => subcalendars" information.
          type: array
          items:
            type: integer
          default: []
        subcalendar_remote_ids:
          title: A list of remote ids of sub-calendars to which the event is assigned.
          type: array
          items:
            type: string
          default: []
          nullable: true
        start_dt:
          $ref: '#/components/schemas/datetime_or_timestamp'
        end_dt:
          $ref: '#/components/schemas/datetime_or_timestamp'
        all_day:
          title: Whether the event spans all day or is an hourly event.
          description: |-
            Set to `true` for an all-day event, set to `false` for an event with
            a time
          type: boolean
          default: false
        notes:
          title: A description of the event.
          description: |-
            This can either be markdown or HTML. The format has to be defined via the
            `inputFormat` query parameter.

            When this contains links to new attachments those links need to end with
            exactly the same value that is used for the attachments `path` parameter. Best is, when
            it actually is the attachments `link` parameter.
          type: string
          default: ''
        remote_id:
          title: 'Unique (per calendar) remote identifier, can be used to link Teamup events to events in third-party applications.'
          type: string
          nullable: true
        title:
          title: Event title.
          type: string
          nullable: true
        location:
          title: Event location ("where" field).
          type: string
          nullable: true
        who:
          title: Event "Who" field.
          type: string
          nullable: true
        signup_enabled:
          type: boolean
        signup_deadline:
          title: When is the last time someone can sign up for an event.
          description: |-
            If now deadline has been set, then event start time is taken as the
            default signup deadline.
          type: string
          format: date-time
          nullable: true
        signup_visibility:
          title: This is a required field when signups are enabled.
          type: string
          enum:
            - all_users
            - users_with_modify_permission
          nullable: true
        signup_limit:
          title: 'The maximum number of signups, if any, or 0 if there is no limit.'
          description: This is a required field when signups are enabled
          type: integer
          minimum: 0
          nullable: true
        comments_enabled:
          type: boolean
        comments_visibility:
          title: 'When comments are enabled, this is a required field'
          type: string
          enum:
            - all_users
            - users_with_modify_permission
          nullable: true
        custom:
          title: Custom field values for user-defined custom event fields.
          description: This is an object with custom field ids as keys and values as strings or arrays of strings for fields of type "choice".
          type: object
          example:
            field1: value
            choicefield:
              - a
              - b
          nullable: true
          additionalProperties: true
        attachments:
          title: Attachments
          description: A list of Attachments for this event.
          type: array
          items:
            $ref: '#/components/schemas/Attachment.create'
      type: object
    datetime:
      type: string
      pattern: '[0-9]{4}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9]'
    emailorblank:
      type: string
      pattern: (^$)|(.*@.*)
    datetime_or_timestamp:
      oneOf:
        - type: string
          format: datetime
        - type: integer
    date_time_or_timestamp:
      oneOf:
        - type: string
          format: date_time
        - type: integer
    comment_message:
      example: '\u003Cp\u003EHi Mark, I need a projector for my presentation. Thanks\u003C\/p\u003E'
      oneOf:
        - type: string
        - properties:
            markdown:
              type: string
            html:
              type: string
          type: object
          additionalProperties: false
      additionalProperties: false
    api_error:
      title: API Error
      description: 'API errors do not follow [RFC7807](https://datatracker.ietf.org/doc/html/rfc7807)'
      properties:
        error:
          properties:
            id:
              type: string
            title:
              type: string
            message:
              type: string
          type: object
      type: object
    event_history:
      title: Event History
      description: An overview over creation and update dates and - depending on access level - users.
      properties:
        created:
          properties:
            by:
              description: This will be an empty string when the event is read-only
              type: string
              example: 'Administrator, User1'
            datetime:
              type: string
              format: date-time
          type: object
        updates:
          description: This will be an empty array when the event has not been updated yet
          type: array
          items:
            properties:
              by:
                description: This will be an empty string when the event is read-only
                type: string
                example: 'Administrator, User1'
              datetime:
                type: string
                format: date-time
            type: object
      type: object
    user_dashboard_calendar:
      title: Dashboard calendar
      description: Returns a calendar on the dashboard of an user
      properties:
        title:
          description: The title of the calendar.
          type: string
        type:
          description: Type of access to calendar
          type: string
          example: anonymous or login
        token:
          description: The calendar identifier is view is 'login' or access key if view is 'anonymous'.
          type: string
        view:
          description: The name of the calendar link for calendars that are accessed using an anonymous links. For other calendars it is an empty string.
          type: string
        require_password:
          description: A flag indicating if a password is required to access this link or not.
          type: boolean
        logo_url:
          description: 'The calendar custom logo url, if has been defined.'
          type: string
          nullable: true
        bg_color:
          description: The calendar's header background color.
          type: string
          example: '#1070ad'
        font_color:
          description: The calendar's header color.
          type: string
          example: '#1070ad'
        org_url_name:
          description: The organization identifier if the calendar is assigned to a visible organization.
          type: string
          nullable: true
        is_admin:
          description: Flag indicating that user is admin of current calendar.
          type: boolean
      type: object
    user_dashboard_organization:
      title: Dashboard organization
      description: Returns a organization on the dashboard of an user
      properties:
        name:
          description: The organization name.
          type: string
        url_name:
          description: The organization identifier.
          type: string
        is_member:
          description: A flag indicating if a user is member of the organization.
          type: boolean
        is_editable:
          description: A flag indicating if the user has write permission to organization.
          type: boolean
        is_owner:
          description: A flag indicating if the user is owner of the organization.
          type: boolean
        is_billing_member:
          description: A flag indicating if the user is a billing member of the organization.
          type: boolean
      type: object
    user_search:
      title: Search user
      description: Returns a user on search by email or full name
      properties:
        email:
          description: The primary email address of the user
          type: string
        name:
          description: The name of the user
          type: string
        avatar_type:
          description: 'The avatar type of the user: gravatar, uploaded_image or initial'
          type: string
        avatar_url:
          description: The link to the user's avatar image
          type: string
        language:
          description: The language the user wants to have their information displayed in
          type: string
        two_fa_active:
          description: Whether this user has two factor authentication enabled
          type: boolean
        is_sso:
          description: Whether this user has been authenticated via an SSO provider
          type: boolean
      type: object
    Subscription.response:
      title: The just created or modified subscription
      description: Returns the just created or modified subscription
      properties:
        subscription:
          properties:
            timezone:
              description: The timezone in which to display times in the notification
              type: string
              example: Europe/Zurich
            schedule:
              description: The schedule
              type: string
              enum:
                - immediate
                - delayed_5min
                - daily
            active:
              description: Whether the notification is active or not
              type: boolean
            subcalendars:
              type: array
              items:
                required:
                  - subcalendar_id
                  - creation_dt
                properties:
                  subcalendar_id:
                    description: The ID of the subcalendar that we subscribed to
                    type: integer
                    example: 0
                  contents:
                    type: string
                    enum:
                      - all
                      - non_trivial
                      - new_events
                  creation_dt:
                    description: The date and time the subcalendar was created
                    type: string
                    format: datetime
                type: object
            creation_dt:
              description: The creation date and time of the notification
              type: string
              format: datetime
          type: object
      type: object
    Webhook.Notification:
      title: Webhook Notification
      type: object
    Subscription.create:
      title: Search user
      description: Returns a user on search by email or full name
      properties:
        timezone:
          description: The timezone in which to display times in the notification
          type: string
          example: Europe/Zurich
        active:
          description: Whether the notification is active or not
          type: boolean
          example: true
        schedule:
          type: string
          enum:
            - immediate
            - daily
            - 5 minutes
        subcalendars:
          type: array
          items:
            properties:
              subcalendar_id:
                description: The id of the subcalendar to be used
                type: integer
              contents:
                description: What to notify about.
                type: string
                enum:
                  - all
            type: object
        recipient:
          description: The URL the webhook is sent to
          type: string
          example: 'https:/example.com/webhook'
      type: object
    LicenseFeatures:
      title: Plan Features
      description: General Information about the currently active Plan
      required:
        - calendar_limit
        - history
        - daily_agenda
        - passwords
        - company_cam
        - file_storage
        - max_file_size
        - refresh_param
        - file_upload
        - notification_for_past
        - import_feed_frequency
        - show_footer_logo
        - custom_field_limit
        - custom_field_option_limit
        - max_users
        - attachments
        - flags
      properties:
        calendar_limit:
          title: How many subcalendars can this calendar hold at max
          type: integer
        history:
          title: How many months of history will be kept
          type: integer
        daily_agenda:
          title: Can users use the daily agenda
          type: boolean
        passwords:
          title: Can calendars be password protected
          type: boolean
        company_cam:
          title: Can this calendar use the CompanyCam feature
          type: boolean
        file_storage:
          title: How many bytes of filestorage are allowed for this calendar
          type: integer
        max_file_size:
          title: How many bytes can a file have at max
          type: integer
        refresh_param:
          title: Will parameters refresh
          type: boolean
        file_upload:
          title: Is file-upload possible
          type: boolean
        notification_for_past:
          title: Will notifications for past events be possible
          type: boolean
        import_feed_frequency:
          title: What are possible intervals for feed-imports.
          description: intervals are in seconds
          type: array
          items:
            type: integer
        show_footer_logo:
          title: Do we show the footer logo on this calendar
          type: boolean
        custom_field_limit:
          title: How many custom fields can this calendar have
          type: integer
        custom_field_option_limit:
          title: How many Options can a custom field have
          type: integer
        max_users:
          title: 'Is there a max amount of users to this calendar and if so, what is it'
          oneOf:
            - type: integer
            - {}
        attachments:
          title: Can this calendar use attachments.
          description: This is always `true`
          type: boolean
        flags:
          title: Which feature-flags have been set for this calendar
          type: object
          example:
            use_rss_feed: true
            use_notifications: false
          additionalProperties:
            type: boolean
      type: object
    FieldDefinition:
      title: Field definition
      description: The general definition of custom and built-in fields. Additional field-specific information is supported via the specific field informations
      required:
        - name
        - type
        - type_data
        - creation_dt
      properties:
        id:
          title: Immutable alphanumeric ID string of the field
          type: string
          default: ''
        name:
          title: |-
            (Display) name for the field given and editable by the user

            For built-in fields, an empty string means the localised name is shown
          type: string
        type:
          type: string
        type_data:
          title: Parameters of the field's type (e.g. options for a choice field)
          type: object
          oneOf:
            - $ref: '#/components/schemas/TitleBuiltinFieldTypeData'
            - $ref: '#/components/schemas/CalendarsBuiltinFieldTypeData'
            - $ref: '#/components/schemas/WhoBuiltinFieldTypeData'
            - $ref: '#/components/schemas/LocationBuiltinFieldTypeData'
            - $ref: '#/components/schemas/NotesFieldTypeData'
            - $ref: '#/components/schemas/SignupBuiltinFieldTypeData'
            - $ref: '#/components/schemas/CommentsBuiltinFieldTypeData'
            - $ref: '#/components/schemas/AttachmentsBuiltinFieldTypeData'
            - $ref: '#/components/schemas/ChoicesFieldTypeData'
            - $ref: '#/components/schemas/NumberFieldTypeData'
            - $ref: '#/components/schemas/SingleLineTextFieldTypeData'
            - $ref: '#/components/schemas/FormattedTextFieldTypeData'
            - title: Empty object
              properties:
                '': {}
              type: object
              additionalProperties: false
        active:
          title: |-
            Whether or not the field is “active”, which determines whether it is visible and
            can be used on events that are being created or edited (inactive fields cannot be added to
            new events but can remain on existing ones)
          default: true
          oneOf:
            - type: integer
            - type: boolean
        hidden:
          title: Whether or not the field is hidden on existing events
          type: boolean
          default: false
        creation_dt:
          title: Timestamp of the field's creation
          type: string
        update_dt:
          title: Timestamp of the field's last update
          type: string
          default: null
          nullable: true
      type: object
    TitleBuiltinFieldTypeData:
      title: Additional definitions for the built-in 'Title' field
      required:
        - min
        - is_always_enabled_field
      properties:
        min:
          title: 'The minimum number of items (chars, choices) that must be completed to save an event (currently only 0 and 1 allowed)'
          type: integer
          default: 0
        is_always_enabled_field:
          title: Whether a field is always shown or not in the list of fields.
          type: boolean
          default: true
      type: object
      additionalProperties: false
    CalendarsBuiltinFieldTypeData:
      title: Additional definitions for the built-in 'Calendars' field
      required:
        - min
        - shown_in_title
        - is_always_enabled_field
        - hide_required
      properties:
        min:
          title: 'The minimum number of items (chars, choices) that must be completed to save an event (currently only 0 and 1 allowed)'
          type: integer
          default: 0
        shown_in_title:
          title: 'Whether this field''s value should be shown in the title of the event. (hidden, value or emoji)'
          oneOf:
            - type: string
            - type: boolean
        is_always_enabled_field:
          title: Whether a field is always shown or not in the list of fields.
          type: boolean
          default: true
        hide_required:
          title: Whether the required Field switch button should be shown or not.
          type: boolean
          default: true
      type: object
      additionalProperties: false
    WhoBuiltinFieldTypeData:
      title: Additional definitions for the built-in 'Who' field
      required:
        - min
        - shown_in_title
      properties:
        min:
          title: 'The minimum number of items (chars, choices) that must be completed to save an event (currently only 0 and 1 allowed)'
          type: integer
          default: 0
        shown_in_title:
          title: 'Whether this field''s value should be shown in the title of the event. (hidden, value or emoji)'
          oneOf:
            - type: string
            - type: boolean
      type: object
      additionalProperties: false
    LocationBuiltinFieldTypeData:
      title: Additional definitions for the built-in 'Location' field
      required:
        - show_map_link
        - min
        - shown_in_title
      properties:
        show_map_link:
          title: Whether the map link should be displayed in the event editor or not
          type: boolean
          default: true
        min:
          title: 'The minimum number of items (chars, choices) that must be completed to save an event (currently only 0 and 1 allowed)'
          type: integer
          default: 0
        shown_in_title:
          title: 'Whether this field''s value should be shown in the title of the event. (hidden, value or emoji)'
          oneOf:
            - type: string
            - type: boolean
      type: object
      additionalProperties: false
    NotesFieldTypeData:
      title: Additional definitions for the built-in 'Notes' field
      required:
        - min
      properties:
        min:
          title: 'The minimum number of items (chars, choices) that must be completed to save an event (currently only 0 and 1 allowed)'
          type: integer
          default: 0
      type: object
      additionalProperties: false
    SignupBuiltinFieldTypeData:
      title: Additional definitions for the built-in 'Signup' field
      required:
        - default_enabled
        - default_deadline_enabled
        - default_deadline_offset
        - default_visibility
        - default_limit
      properties:
        default_enabled:
          title: Whether signups should be enabled by default on a new event
          type: boolean
          default: false
        default_deadline_enabled:
          title: Whether the signup deadline should be enabled by default on a new event
          type: boolean
          default: false
        default_deadline_offset:
          title: An ISO 8601 duration string specifying how far before the event the default deadline should be
          type: string
          default: P0D
        default_visibility:
          title: The default visibility level on signups for a new event
          type: string
          default: users_with_modify_permission
          enum:
            - all_users
            - users_with_modify_permission
        default_limit:
          title: The default signup limit for a new event (0 = no limit)
          type: integer
          default: 0
        confirmation_email_enabled:
          type: boolean
          default: true
      type: object
      additionalProperties: false
    CommentsBuiltinFieldTypeData:
      title: Additional definitions for the built-in 'Comments' field
      required:
        - default_enabled
        - default_visibility
      properties:
        default_enabled:
          title: Whether comments should be enabled by default on a new event
          type: boolean
          default: false
        default_visibility:
          title: The default visibility level on comments for a new event
          type: string
          default: users_with_modify_permission
          enum:
            - all_users
            - users_with_modify_permission
      type: object
      additionalProperties: false
    AttachmentsBuiltinFieldTypeData:
      title: Additional definitions for the built-in 'Attachments' field
      required:
        - default_enabled
      properties:
        default_enabled:
          title: Whether attachments should be enabled by default on a new event
          type: boolean
          default: false
      type: object
      additionalProperties: false
    ChoicesFieldTypeData:
      title: Additional definitions for the custom choices field
      required:
        - options
        - max
        - min
        - shown_in_title
      properties:
        options:
          title: The user-defined options used by the field
          type: array
          items:
            $ref: '#/components/schemas/Option'
          default: []
        max:
          title: The maximum number of choices that can be selected (0 = infinite; currently only 0 and 1 allowed)
          type: integer
        min:
          title: 'The minimum number of items (chars, choices) that must be completed to save an event (currently only 0 and 1 allowed)'
          type: integer
          default: 0
        shown_in_title:
          title: 'Whether this field''s value should be shown in the title of the event. (hidden, value or emoji)'
          oneOf:
            - type: string
            - type: boolean
      type: object
      additionalProperties: false
    NumberFieldTypeData:
      title: Additional definitions for the custom number field
      required:
        - prefix
        - postfix
        - decimals
        - min
        - shown_in_title
      properties:
        prefix:
          title: Prefix string for the number field
          type: string
          default: ''
        postfix:
          title: Postfix string for the number field
          type: string
          default: ''
        decimals:
          title: Number of decimals for the number value used for rounding
          type: string
          default: ''
        min:
          title: 'The minimum number of items (chars, choices) that must be completed to save an event (currently only 0 and 1 allowed)'
          type: integer
          default: 0
        shown_in_title:
          title: 'Whether this field''s value should be shown in the title of the event. (hidden, value or emoji)'
          oneOf:
            - type: string
            - type: boolean
      type: object
      additionalProperties: false
    SingleLineTextFieldTypeData:
      title: Additional definitions for custom-defined single line text fields
      required:
        - min
        - shown_in_title
        - show_in_title
      properties:
        min:
          title: 'The minimum number of items (chars, choices) that must be completed to save an event (currently only 0 and 1 allowed)'
          type: integer
          default: 0
        shown_in_title:
          title: 'Whether this field''s value should be shown in the title of the event. (hidden, value or emoji)'
          oneOf:
            - type: string
            - type: boolean
      type: object
      additionalProperties: false
    FormattedTextFieldTypeData:
      title: Additional definitions for the built-in 'FormattedText' field
      required:
        - default_visibility
        - min
      properties:
        default_visibility:
          type: string
          default: users_with_modify_permission
          enum:
            - all_users
            - users_with_modify_permission
        min:
          title: 'The minimum number of items (chars, choices) that must be completed to save an event (currently only 0 and 1 allowed)'
          type: integer
          default: 0
      type: object
      additionalProperties: false
    Option:
      title: Option for a custom choice field
      required:
        - id
        - name
        - color
      properties:
        id:
          title: Immutable alphanumeric ID string of the option
          type: string
        name:
          title: Name for the option given by the user
          type: string
        active:
          title: |-
            Whether or not the option is “active”, which determines whether it is visible and can be used
            on events that are being created or edited (inactive options cannot be added to new events
            but can remain on existing ones)
          default: true
          oneOf:
            - type: integer
            - type: boolean
        hidden:
          title: Whether the choice is hidden on existing events
          type: boolean
          default: false
        color:
          title: Color ID of the option
          type: integer
        emoji:
          type: string
          nullable: true
      type: object
  responses:
    login_required:
      description: Login required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/api_error'
          example:
            error:
              id: login_required
              title: Login required
              message: Please login to proceed.
    account_no_permission:
      description: No permission
      content:
        text/html:
          schema:
            type: string
        application/json:
          schema:
            $ref: '#/components/schemas/api_error'
          example:
            error:
              id: account_no_permission
              title: No permission
              message: 'You are currently logged in as <b>Bob, bob@example.org</b>. Your account does not have permission to access this calendar. You may need to get invited first.'
    undo_id:
      description: Returns an undo identifier to undo the operation
      content:
        application/json:
          schema:
            properties:
              undo_id:
                type: string
            type: object
  parameters:
    event_notes_format:
      name: format
      in: query
      description: |
        When the parameter is passed in array-notation the responses 'note' property will contain an
        object of notes, one entry per passed format.

        When the parameter is passed as a string the responses 'note' property will directly contain the
        version of the notes as requested. Depending on the passed parameter this will then be either
        markdown or HTML.

        Markdown format can also contain HTML
      schema:
        oneOf:
          - type: string
            default: html
            enum:
              - html
              - markdown
          - type: array
            items:
              type: string
              enum:
                - html
                - markdown
      examples:
        html:
          summary: Notes in the Body are in HTML-Format
          value: html
        markdown:
          summary: Notes in the body are in Markdown Format.
          value: markdown
    event_notes_input_format:
      name: inputFormat
      in: query
      description: Markdown can also contain HTML
      schema:
        type: string
        enum:
          - html
          - markdown
      examples:
        html:
          summary: Notes in the Body are in HTML-Format
          value: html
        markdown:
          summary: Notes in the body are in Markdown Format.
          value: markdown
  securitySchemes:
    teamup_api_key:
      type: apiKey
      description: API key header (required)
      name: Teamup-Token
      in: header
    user_authentication:
      type: http
      description: |
        Authorization header for logged in users.
        This needs only to be used when the calendarKey does not provide the required access-rights.
      scheme: bearer
security:
  - teamup_api_key: []
    user_authentication: []
tags:
  - name: Authenticate
  - name: Dashboard
  - name: Users
  - name: Calendars
  - name: Configuration
  - name: Attachments
  - name: Event-Comments
  - name: Events
  - name: Access Keys
  - name: Sub-Calendars
  - name: Notifications
