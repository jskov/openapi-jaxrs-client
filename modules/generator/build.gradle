plugins {
    id 'java-library'
}

apply from: "${project.rootDir}/gradle/dk.mada.java.gradle"

dependencies {
    api                 project(':generator-api')
    implementation      project(':model')
    implementation      project(':parser')

    implementation      (libs.logger)

    annotationProcessor (libs.immutablesApt)
    compileOnly         (libs.immutablesAnn)
    compileOnly         (libs.jakartaAnn) // for CtxDto @Nullable hack

    annotationProcessor (libs.jstachioApt)
    annotationProcessor fileTree(layout.projectDirectory.dir('src/main/resources/templates')) { include '**/*' }
    compileOnly         (libs.jstachioAnn)

    testImplementation  (libs.bundles.testUnit)
    testImplementation  (libs.bundles.testGen)
    testImplementation  enforcedPlatform(libs.quarkusBom)
    testImplementation  'io.quarkus:quarkus-rest-client'
    testImplementation  'io.quarkus:quarkus-resteasy-multipart'
    testImplementation  'org.eclipse.microprofile.openapi:microprofile-openapi-api'
    testImplementation  'org.eclipse.microprofile.rest.client:microprofile-rest-client-api'
    testImplementation  'jakarta.json.bind:jakarta.json.bind-api'
    testImplementation  'com.fasterxml.jackson.core:jackson-databind'
}

test {
    //testLogging.showStandardStreams = true
    
    inputs.files(fileTree(dir: "src/test/java", include: "**/openapi.yaml, **/test.properties"))

    systemProperty("run_all_tests", System.getProperty("run_all_tests", "true"))
}

publishing {
    publications {
        maven(MavenPublication) {
            // Keep legacy name for now
            artifactId = "openapi-jaxrs-client"
            
            from components.java

            pom {
                name = 'OpenAPI JAXRS client generator'
                description = 'Generates api- and dto-classes suitable for use with the MicroProfile client'
            }
        }
    }
}
