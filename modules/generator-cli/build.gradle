plugins {
    id 'application'

    id 'com.gradleup.shadow' version '9.0.1'
}

apply from: "${project.rootDir}/gradle/dk.mada.java.gradle"

ext {
    builtOn = project.getProviders().provider(() -> LocalDate.now().toString());
    appVersion = project.getProviders().gradleProperty("version")
}

dependencies {
    implementation      project(':generator-api')
    implementation      project(':generator')

    implementation      (libs.logger)
    implementation      (libs.picocli)

    testImplementation  (libs.bundles.testUnit)
    testRuntimeOnly     project(':generator')
}

shadowJar {
   archiveBaseName.set('ojc')
   archiveClassifier.set('cli')
   archiveVersion.set(project.version)

   destinationDirectory = project.rootProject.file("build/dist")
}

application {
    mainClass = "dk.mada.jaxrs.generator.cli.Main"
}

processResources {
    def capturedAppVersion = appVersion
    def capturedBuiltOn = builtOn
    inputs.property("version", capturedAppVersion)
    inputs.property("builtOn", capturedBuiltOn)

    filesMatching("**/openapi-jaxrs-client-version.properties") {
        filter(s -> s
            .replaceAll("version.*", "version = ${capturedAppVersion.get()}")
            .replaceAll("builtOn.*", "builtOn = ${capturedBuiltOn.get()}")
        )
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'OpenAPI JAXRS generator command'
                description = 'This provides a way for starting the generator from command line'
            }
        }
    }
}
