plugins {
    id 'application'
    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'eclipse'
    id 'jacoco'
    id 'java-library'
    id 'org.sonarqube' version '3.3'
    id 'maven-publish'
}

group 'dk.mada'
if (project.version == 'unspecified') {
    version '0.0.0-SNAPSHOT'
} 

ext {
    distDir = file("build/dist").getAbsolutePath()
    builtOn = LocalDateTime.now()
                .atZone(ZoneId.of('Europe/Copenhagen'))
                .withNano(0)
}

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    apt
}

dependencies {
    implementation      'com.samskivert:jmustache:1.15'
    implementation      'info.picocli:picocli:4.6.3'
    implementation      'io.swagger.parser.v3:swagger-parser:2.0.32'

    annotationProcessor 'org.immutables:value:2.9.0'
    apt                 'org.immutables:value:2.9.0'
    compileOnly         'org.immutables:value:2.9.0:annotations'

    implementation      'org.slf4j:slf4j-jdk14:2.0.0-alpha7'

    testImplementation  platform('org.junit:junit-bom:5.8.2')
    testImplementation  'org.junit.jupiter:junit-jupiter'
    testImplementation  'org.junit.jupiter:junit-jupiter-params'
    testImplementation  'org.junit.jupiter:junit-jupiter-engine'
    testImplementation  'org.junit.jupiter:junit-jupiter-api'
    testImplementation  'org.junit.platform:junit-platform-runner'
    testImplementation  'org.assertj:assertj-core:3.22.0'
	
    // for the generated code
    testImplementation  'javax.annotation:javax.annotation-api:1.3.2'
    testImplementation  'jakarta.annotation:jakarta.annotation-api:2.1.0'
    testImplementation  'javax.json.bind:javax.json.bind-api:1.0'
    testImplementation  'jakarta.json.bind:jakarta.json.bind-api:3.0.0'
    testImplementation  'javax.json:javax.json-api:1.1.4'
    testImplementation  'jakarta.json:jakarta.json-api:2.1.0'
    testImplementation  'jakarta.ws.rs:jakarta.ws.rs-api:3.0.0'
    testImplementation  'javax.ws.rs:javax.ws.rs-api:2.1.1'
    testImplementation  'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    testImplementation  'org.eclipse.microprofile.openapi:microprofile-openapi-api:3.0'
    testImplementation  'org.eclipse.microprofile.rest.client:microprofile-rest-client-api:3.0'
}

shadowJar {
   archiveBaseName.set('ojc')
   archiveClassifier.set('cli')
   archiveVersion.set(project.version)
   
   destinationDirectory = file("build/dist")
}

application {
    mainClass = "dk.mada.jaxrs.Main"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    
    withJavadocJar()
    withSourcesJar()
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

processResources {
    inputs.property("version", project.version)
    inputs.property("builtOn", builtOn)

    filesMatching("**/openapi-jaxrs-client-version.properties") {
        filter(s -> s
            .replaceAll("version.*", "version = ${project.version}")
            .replaceAll("builtOn.*", "builtOn = ${builtOn}")
        )
    }
}

javadoc {
    options {
//        verbose()
    }
}

test {
    useJUnitPlatform()

    systemProperty("run_all_tests", "true")
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.required.set(true)
    }
    dependsOn test // tests are required to run before generating the report
}

checkstyle {
    ignoreFailures = true
}

sonarqube {
    properties {
        property "sonar.inclusions", "src/main/**"
        property "sonar.exclusions", "**/OpenapiGeneratorUtils.java, **/Immutable*.java"

        property "sonar.projectKey", "jskov_openapi-jaxrs-client"
        property "sonar.organization", "jskov-github"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.checkstyle.reportPaths", "build/reports/checkstyle/main.xml"
    }
}

publishing {
    repositories {
        maven {
            name = "dist"
            url "file://${distDir}"
        }
    }
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'OpenAPI JAXRS client'
                description = 'A JAXRS client generator'
                url = 'https://github.com/jskov/openapi-jaxrs-client'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jskov'
                        name = 'Jesper Skov'
                        email = 'jskov@mada.dk'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jskov/openapi-jaxrs-client.git'
                    developerConnection = 'scm:git:ssh://github.com:jskov/openapi-jaxrs-client.git'
                    url = 'https://github.com/jskov/openapi-jaxrs-client/'
                }
            }
        }
    }
}

// Not sure how to properly exclude cli from published artifacts
publish.doLast {
    project.delete(fileTree(dir: "build/dist/dk", include: "**/*-cli.*").files)
    project.delete(fileTree(dir: "build/dist/dk", include: "**/*.module*").files)
    project.delete(fileTree(dir: "build/dist/dk", includes: ["**/*.md5", "**/*.sha1", "**/*.sha256", "**/*.sha512"]).files)
}

tasks.eclipse.doLast {
    String valueJarPath = configurations.apt.getSingleFile().getAbsolutePath()
    
    File factoryPath = file(".factorypath")
    factoryPath.delete()
    factoryPath << """<factorypath>
  <factorypathentry kind="EXTJAR" id="${valueJarPath}" enabled="true" runInBatchMode="false"/>
</factorypath>
"""
}
