plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.0'
    id 'eclipse'
    id 'jacoco'
    id 'java-library'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'maven-publish'

    id 'dk.mada.java'
    id 'dk.mada.apt-errorprone'
    id 'dk.mada.apt-values'
    id 'dk.mada.apt-jstachio'
}

group "${groupId}"

ext {
    distDir = file("build/dist").getAbsolutePath()
    builtOn = LocalDate.now()
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation      'info.picocli:picocli'
    implementation      'io.swagger.parser.v3:swagger-parser'

    implementation      'org.slf4j:slf4j-jdk14:2.0.6'

    // for the generated code
    testImplementation  'io.quarkus:quarkus-rest-client:2.16.4.Final'
    testImplementation  'jakarta.annotation:jakarta.annotation-api:2.1.1'
    testImplementation  'jakarta.json:jakarta.json-api:2.1.1'
    testImplementation  'jakarta.json.bind:jakarta.json.bind-api:3.0.0'
    testImplementation  'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'
    testImplementation  'javax.annotation:javax.annotation-api:1.3.2'
    testImplementation  'javax.json:javax.json-api:1.1.4'
    testImplementation  'javax.json.bind:javax.json.bind-api:1.0'
    testImplementation  'javax.ws.rs:javax.ws.rs-api:2.1.1'
    testImplementation  'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    testImplementation  'org.eclipse.microprofile.openapi:microprofile-openapi-api:3.1'
    testImplementation  'org.eclipse.microprofile.rest.client:microprofile-rest-client-api:3.0.1'
}

shadowJar {
   archiveBaseName.set('ojc')
   archiveClassifier.set('cli')
   archiveVersion.set(project.version)
   
   destinationDirectory = file("build/dist")
}

application {
    mainClass = "dk.mada.jaxrs.Main"
}

java {
    withJavadocJar()
    withSourcesJar()
}


compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

processResources {
    inputs.property("version", project.version)
    inputs.property("builtOn", builtOn)

    filesMatching("**/openapi-jaxrs-client-version.properties") {
        filter(s -> s
            .replaceAll("version.*", "version = ${project.version}")
            .replaceAll("builtOn.*", "builtOn = ${builtOn}")
        )
    }
}

jar {
    exclude "**/GeneratorService.class"
    includeEmptyDirs false
}

javadoc {
    options {
//        verbose()
    }
}

test {
    useJUnitPlatform()

    //testLogging.showStandardStreams = true

    systemProperty("run_all_tests", System.getProperty("run_all_tests", "true"))
}

jacocoTestReport {
    reports {
        xml.required.set(true)
    }
    dependsOn test // tests are required to run before generating the report
}

sonarqube {
    properties {
        property "sonar.projectKey", "jskov_openapi-jaxrs-client"
        property "sonar.organization", "jskov-github"
        property "sonar.host.url", "https://sonarcloud.io"

        property "sonar.inclusions", "**/src/main/**"
        property "sonar.exclusions", "**/OpenapiGeneratorUtils.java, **/Immutable*.java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.java.checkstyle.reportPaths", "**/build/reports/checkstyle/*.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", "**/build/reports/jacoco/test/*.xml"
    }
}

project.tasks["sonar"].dependsOn([
    ":jacocoTestReport",
    ":gradle-plugin:jacocoTestReport",
    ":checkstyleMain",
    ":gradle-plugin:checkstyleMain"
])

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    repositories {
        maven {
            name = "dist"
            url "file://${distDir}"
        }
    }
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'OpenAPI JAXRS client'
                description = 'A JAXRS client generator'
                url = 'https://github.com/jskov/openapi-jaxrs-client'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jskov'
                        name = 'Jesper Skov'
                        email = 'jskov@mada.dk'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jskov/openapi-jaxrs-client.git'
                    developerConnection = 'scm:git:ssh://github.com:jskov/openapi-jaxrs-client.git'
                    url = 'https://github.com/jskov/openapi-jaxrs-client/'
                }
                
                withXml {
                    def node = it.asNode()
                    def versionNode = node.version[0]
                    def parentDependency = node.dependencyManagement.dependencies.dependency[0]
                    parentDependency.append(versionNode)
                }
            }
        }
    }
}

// Not sure how to properly exclude cli from published artifacts
publish {
    dependsOn(gradle.includedBuild('platforms').task(':openapi-jaxrs-bom:publish'))
    doLast {
        project.delete(fileTree(dir: "build/dist/dk", include: "**/*-cli.*").files)
        project.delete(fileTree(dir: "build/dist/dk", include: "**/*.module*").files)
        project.delete(fileTree(dir: "build/dist/dk", includes: ["**/*.md5", "**/*.sha1", "**/*.sha256", "**/*.sha512"]).files)
    }
}


// This task configures enough of the eclipse settings to make
// vscode-java plugin work with APT
task prepCodeGen() {
    doLast {
        String valueJarPath = configurations.aptValue.getSingleFile().getAbsolutePath()

        mkdir(".settings")
        
        File factoryPath = file(".factorypath")
        factoryPath.delete()
        factoryPath << """<factorypath>
  <factorypathentry kind="EXTJAR" id="${valueJarPath}" enabled="true" runInBatchMode="false"/>
"""
        
        configurations.aptStach.getFiles().each { f ->
          String p = f.getAbsolutePath()
          factoryPath << """
  <factorypathentry kind="EXTJAR" id="${p}" enabled="true" runInBatchMode="false"/>
"""
        }

        factoryPath << """
</factorypath>
"""

        File apt = file(".settings/org.eclipse.jdt.apt.core.prefs")
        apt.delete()
        apt << """eclipse.preferences.version=1
org.eclipse.jdt.apt.aptEnabled=true
org.eclipse.jdt.apt.genSrcDir=.apt_generated
org.eclipse.jdt.apt.genTestSrcDir=.apt_generated_tests
org.eclipse.jdt.apt.reconcileEnabled=true
"""

        File jdt = file(".settings/org.eclipse.jdt.core.prefs")
        jdt.delete()
        jdt << """eclipse.preferences.version=1
org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
org.eclipse.jdt.core.compiler.codegen.targetPlatform=17
org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
org.eclipse.jdt.core.compiler.compliance=17
org.eclipse.jdt.core.compiler.debug.lineNumber=generate
org.eclipse.jdt.core.compiler.debug.localVariable=generate
org.eclipse.jdt.core.compiler.debug.sourceFile=generate
org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
org.eclipse.jdt.core.compiler.problem.enablePreviewFeatures=disabled
org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
org.eclipse.jdt.core.compiler.problem.reportPreviewFeatures=warning
org.eclipse.jdt.core.compiler.processAnnotations=enabled
org.eclipse.jdt.core.compiler.release=disabled
org.eclipse.jdt.core.compiler.source=17
"""

        File buildship = file(".settings/org.eclipse.buildship.core.prefs")
        buildship.delete()
        buildship << """connection.project.dir=
eclipse.preferences.version=1
"""

        File encoding = file(".settings/org.eclipse.core.resources.prefs")
        encoding.delete()
        encoding << """eclipse.preferences.version=1
encoding/<project>=UTF-8
"""
    }
}

tasks.eclipse {
    dependsOn("prepCodeGen")
    doLast {
        mkdir "build/e2e"
    }
}

// When working on templates, eclipse will only run the annotation
// processor, if the @JStache classes are changed.
// So run './gradlew -t processResources' and this hack will deliver.
processResources {
    doLast {
        def time = System.currentTimeMillis()
        file("src/main/java/dk/mada/jaxrs/generator/api/tmpl/CtxApi.java").setLastModified(time)
        file("src/main/java/dk/mada/jaxrs/generator/dto/tmpl/CtxDto.java").setLastModified(time)
    }
}
