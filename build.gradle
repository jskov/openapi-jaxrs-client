plugins {
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'eclipse'
    id 'java-library'
    id 'maven-publish'

    id 'dk.mada.java'
    id 'dk.mada.apt-errorprone'
    id 'dk.mada.apt-values'
    id 'dk.mada.apt-jstachio'
    id 'dk.mada.eclipse'
}

ext {
    distDir = file("build/dist").getAbsolutePath()
    builtOn = LocalDate.now()
}

dependencies {
    implementation      'info.picocli:picocli'
    implementation      'io.swagger.parser.v3:swagger-parser'

    implementation      'org.slf4j:slf4j-jdk14:2.0.7'

    // for the generated code
    testImplementation 'javax.json:javax.json-api:1.1.4'
    testImplementation 'javax.json.bind:javax.json.bind-api:1.0'
    testImplementation 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    testCompileOnly 'io.quarkus:quarkus-rest-client:3.0.0.Final'
    testCompileOnly 'jakarta.annotation:jakarta.annotation-api:2.1.1'
    testCompileOnly 'jakarta.json:jakarta.json-api:2.1.1'
    testCompileOnly 'jakarta.json.bind:jakarta.json.bind-api:3.0.0'
    testCompileOnly 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'
    testCompileOnly 'javax.annotation:javax.annotation-api:1.3.2'
    testCompileOnly 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    testCompileOnly 'org.eclipse.microprofile.openapi:microprofile-openapi-api:3.1'
    testCompileOnly 'org.eclipse.microprofile.rest.client:microprofile-rest-client-api:3.0.1'
}

shadowJar {
   archiveBaseName.set('ojc')
   archiveClassifier.set('cli')
   archiveVersion.set(project.version)
   
   destinationDirectory = file("build/dist")
}

application {
    mainClass = "dk.mada.jaxrs.Main"
}

java {
    withJavadocJar()
    withSourcesJar()
}

processResources {
    inputs.property("version", project.version)
    inputs.property("builtOn", builtOn)

    filesMatching("**/openapi-jaxrs-client-version.properties") {
        filter(s -> s
            .replaceAll("version.*", "version = ${project.version}")
            .replaceAll("builtOn.*", "builtOn = ${builtOn}")
        )
    }
}

jar {
    exclude "**/GeneratorService.class"
    includeEmptyDirs false
}

javadoc {
    options {
//        verbose()
    }
}

test {
    //testLogging.showStandardStreams = true

    systemProperty("run_all_tests", System.getProperty("run_all_tests", "true"))
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

publishing {
    repositories {
        maven {
            name = "dist"
            url "file://${distDir}"
        }
    }
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'OpenAPI JAXRS client'
                description = 'A JAXRS client generator'
                url = 'https://github.com/jskov/openapi-jaxrs-client'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jskov'
                        name = 'Jesper Skov'
                        email = 'jskov@mada.dk'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jskov/openapi-jaxrs-client.git'
                    developerConnection = 'scm:git:ssh://github.com:jskov/openapi-jaxrs-client.git'
                    url = 'https://github.com/jskov/openapi-jaxrs-client/'
                }
                
                withXml {
                    def node = it.asNode()
                    def versionNode = node.version[0]
                    def parentDependency = node.dependencyManagement.dependencies.dependency[0]
                    parentDependency.append(versionNode)
                }
            }
        }
    }
}

// Not sure how to properly exclude cli from published artifacts
publish {
    dependsOn(gradle.includedBuild('platforms').task(':openapi-jaxrs-bom:publish'))
    doLast {
        project.delete(fileTree(dir: "build/dist/dk", include: "**/*-cli.*").files)
        project.delete(fileTree(dir: "build/dist/dk", include: "**/*.module*").files)
        project.delete(fileTree(dir: "build/dist/dk", includes: ["**/*.md5", "**/*.sha1", "**/*.sha256", "**/*.sha512"]).files)
    }
}

publishToMavenLocal {
    dependsOn(gradle.includedBuild('platforms').task(':openapi-jaxrs-bom:publishToMavenLocal'))
}
